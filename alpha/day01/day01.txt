1. os模块常用方法
  1. 创建目录 : os.mkdir('')
  2. 切换目录 : os.chdir('')
  3. 删除目录 : os.rmdir('')
  4. 是否存在 : os.path.exists('')
  5. 系统命令 : os.system('Linux命令')
2. 可迭代对象,迭代器对象,生成器
  1. 可迭代对象
    1. 定义 : 可通过for循环迭代读取数据供我们使用的对象
    2. 本质 : 可迭代对象通过__iter__()方法向我们提供一个迭代器,在迭代一个对象(列表)时,实际上先获取该对象提供的迭代器,然后通过这个迭代器依次获取每个数据
    3. __iter__()和__next__()函数作用
      __iter__():获取可迭代对象的迭代器
      __next__():对迭代器不断使用__next__()函数来获取下一条数据,完成后再调用会抛出StopIteration异常
  2. 迭代器对象
    一个实现了__iter__()方法和__next__()方法的对象
  3. 生成器
    1. 函数中有yield关键字,称为生成器
    2. yield作用
      1. 保存当前运行状态,暂停执行,即将生成器挂起
      2. 将yield关键字后面的表达式的值返回,类似于return
3. 并发和并行
  1. 并发 : 同时处理多个任务,内核在任务间不断切换,达到好像多个任务同时执行的效果,实际上同一时刻只有1个任务在占用CPU
  2. 并行 : 多个任务利用计算机多核资源同时执行
  3. 计算机系统中,并行和并发同时存在
4. 进程,线程,协程
  1. 进程 : 程序的运行过程,CPU分配资源的最小单位
  2. 线程 : 最小执行单元,系统分配的内核的最小单位,由所属进程管理,一个进程可包含多个线程
  3. 协程
    1. 定义 : 微线程,协程允许在不同的位置暂停或开始执行,协程是可以暂停执行的函数
    2. 原理 : 记录一个函数栈的上下文,进行协程的切换调度,当一个函数暂停执行时,会将上下文栈帧保存起来
    3. 本质 : 单线程,资源消耗小,无须线程间切换的开销,无须加互斥锁
    4. 协程模块 : greenlet  gevent
    5. 基于协程的多任务并发
5. GIL全局解释器锁
  1. 特点 : 保证了同一时刻只能有一个线程在执行
  2. 作用 : 在单核情况下实现多任务
  3. 产生问题原因 : 1个CPU分配给1个进程,进程中的线程使用GIL进行资源抢夺
  4. 解决方案
    1. 使用其他解释器(JPython,但是太慢),因为只有CPython中才有GIL
    2. 使用其他语言(C/Java)来写多线程这部分代码
    3. 使用多进程+协程方式(推荐,高效)
6. 死锁
  1. 定义 : 两个或者多个进程/线程在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都无法进行,此时称系统处于死锁状态
7. 互斥锁
  1. 共享资源(临界资源) ：多个线程都可以操作的资源
  2. 临界区 ：操作临界资源的代码
  3. 互斥 ：制约关系,一般通过上锁实现,当一个进程或者线程使用临界资源时,进行加锁处理,此时其它进程/线程无法操作该临界资源,直到解锁后才可操作  
  4. python语句在计算机中执行是分多条语句执行,对于+=1操作,先赋值给一个临时变量,然后再赋值给一个新的变量
8. MySQL
  1. 查询
    1. 3. select ...聚合函数 from 表名 
       1. where 条件
       2. group by ...
       4. having ...
       5. order by ...
       6. limit ...
    2. 多表查询 : select ... from 表1,表2;
    3. 查询所有班级的平均成绩大于80的班级的名称和平均成绩,前5名
      select class,avg(score) from t1 
      group by class 
      having avg(score) > 80
      order by avg(score) desc
      limit 5;
    4. 连接查询
      select ... from 表1 
      inner/left/join 表2 on 条件;
  2. 索引
    1. 优缺点
      1. 提高检索速度
      2. 唯一索引可保证数据库表中每行数据唯一性
      3. 使用分组和排序子句进行检索时,可明显减少查询中分组和排序的时间
      4. 创建索引和维护索引需要消耗时间
      5. 索引需要占用物理存储空间
      6. 表中数据更新时需要动态维护,降低数据维护速度
    2. 建立原则
      1. 频繁用来查询字段建立索引
      2. 需要排序的字段
      3. 频繁使用条件判断的字段
  3. 存储引擎
    1. InnoDB : 行级锁,支持外键,支持事务
    2. MyISAM : 支持表级锁,操作速度快,读写操作不能太频繁
    3. MEMORY : 表记录在内存中,存放一些临时表









      
















