
算法三个特征
    1.必须有有一个结果
    2.有穷性
    3.可行性

两种基本的算法设计模型
    贪心法 ： 贪婪算法
    枚举法 ： 必须找到一个最优解

伪代码 ：就是解决问题的思路
    包括：自然语言
        数学表达形式
        不纠结于具体的编程语言形式

算法分析：
    任何算法的实施必定消耗时间和空间上的资源

时间复杂度：最坏时间复杂度  最优时间复杂度  平均复杂度

时间复杂度的几条基本计算规则：
    只有常数项，时间复杂度表示为 O（1）           
    顺序结构，时间复杂度按加法来计算        
    循环结构，乘法                         
    分支结构，取最大值                                   
    只关注操作数量的最高次项，其它次要项和常数项不考虑  

        3                   O(1)
        2n +3               O(n)
        3n**2 +2n +3        O(n**2)
        5log2N              O(logn)
        2n + 3nlog2n +19    O(nlogn)
        6n**3+2n**2+3n+2    O(n**3)
        2**n                O(2**n)

    对数： N = a**x    x =log(a)N    x为以a为底数的真数N的对数。

    O(1) < O(logN) < O(n) < O(nlogn) < O(n**2) < O(n**3) < O(2**n) < O(n!) < O(n**n)

链表
    二元组 (元素域 elem <值> 链接域 next<指针>) 
    其中每一个一个二元组也叫结点，链表由其组成
        元素域为值，链接next 指向下一个结点。

为了掌握一个单链表，只需要用一个变量来保存这个表的首结点应用
  表头指针，表头变量    p表示
  链表结尾             倒着的 T 

class Node(object):
    def __init__(self,item):
        #存储数据元素
        self.item = item
        #链接域存储下一个结点的位置信息
        self.next = None

创建空链表：创建Node()对象

删除链表：删除链接变量 (python 会自动回收对象<值>)

加入元素：头部插入，中间加入
(加入元素的指针变量指向下一结点的元素域，断掉链接结点的连接，
把上一个结点的指针指向加入二元组的元素域)

删除元素：删除表头结点，删除中间结点
(让上一个的指针指向要删结点的下一结点的元素域，再删结点))

   在中间操作先找上一个结点。


一、数据结构
  1、数据:所有能被记录到计算机并且能被计算机处理的符号的集合
  2、数据类型：如数字，字符串
  3、数据结构：计算机存储和组织数据的方式。
  4、算法：计算机为了解决特定问题而产生的一系列解决问题的指令
         简而言之：就是解决方案的准备完整的描述
		 
二、学习的目标
  数据结构：理解逻辑结构、物理结构
  算法：排序算法、查找算法

三、正文
逻辑结构：数据之间(与计算机无关)的关系。
   主要分类：线性结构和非线性结构。		￥是从数据的先后关系描述区分数据结构

      线性结构：		￥一前驱多后继情况
            1、必须只有唯一的首元素和唯一的尾元素
            2、中间元素只有一个前驱元素和一个后继元素
       
      非线性结构包括：集合结构、树状结构、网状结构

         集合结构：			￥无前驱元素无后继元素情况
            1、无序性
            2、不能重复
            3、确定性 ：不能是可变的类型

         树状结构： 根节点--->子节点--->叶节点				￥一前驱多后继情况
            1、结构中必须存在唯一的一个根节点(根元素)
            2、除根元素外，结构中每一个元素有且只有一个前驱元素
            3、除叶元素外，结构中每一个元素拥有一个或多个后续元素
               树状结构中的数据具有是一对多的父子关系

         网状结构：			￥多前驱多后继情况
            1、结构中每一个元素都可以拥有任意数量的前驱元素和后继元素
            2、结构中任意两个元素之间都可以建立关联
            3、网状结构中是数据具有多对多的关系 

物理结构：
    概念：数据具体在计算机内存中的存储方式。
    分类：顺序存储结构、链式存储结构

        顺序存储：是将逻辑上相邻的元素放在物理内存也是相邻的存储单元中
            优点：
               1、 节省存储空间：只需要为每个数据本身分配存储空间，不需要
                                 占用额外的空间来表示数据之间的逻辑关系
               2、 方便随机存取元素

            缺点：1、连续的存储会降低空间的使用率。
                  2、任意位置增加或者删除数据时操作复杂

        链式存储：是使用不连续的存储空间来存放结构中的数据，将每一个元素构造
                 一个节点，节点中除了存放元素本身外，还需要存放下一个节点的地址
            优点：提高空间的使用率
            缺点：
                1、总体的空间开销比顺序存储要大
                2、不方便随机的存取元素

    两者间关系:
        每一种逻辑结构采用哪一种物理结构来实现是没有规定。

    基于顺序存储实现的表结构: 顺序表
    基于链式存储实现的表结构: 链表 

    动态顺序表的存储方式:记录表的信息单元(分配单元和实际已存单元)和存储单元

实战：
    单链表：单向的链表        data|next        结尾指针为None
    双链表: 双向指向的链表    prev|data|next   两头指针为None

    链表的基本特征:
        1.每一个数据放在一个独立的存储区
        2.还需要保证结构中任一结点可以找到与其相关联的下一结点
        3.前一结点用链接方式显示的记录下一个结点之间的关联

        单链表
            class Node:
                def __init__(self, data=None):
                    self.data = data
                    self.next = None

            # 链式栈
            class LStack:
                # 构建空栈　－　空节点
                def __init__(self):
                    self._head = Node()
                    self._count = 0

                # 判空
                def is_empty(self):
                    return self._count == 0

                #　判满　(因使用链式结构来实现无固定大小，故不需要判满)

                #　压入数据
                def push(self, elem):
                    # 创建数据节点
                    tmp = Node(elem)
                    # 新节点放人栈中
                    if self.is_empty():
                        self._head = tmp
                    else:
                        tmp.next = self._head
                        self._head = tmp
                    #　栈中数据节点计数加一
                    self._count += 1

                # 弹出数据
                def pop(self):
                    # 需要判断栈是否为空
                    if self.is_empty():
                        raise IndexError("stack error:试图从空栈中弹出数据")
                    else:
                        # 节点数目减一
                        self._count -= 1
                        # 保存数据
                        elem = self._head.data
                        # 栈顶变更
                        self._head = self._head.next
                        # 返回数据
                        return elem

        双向链表    
            class Node:
                def __init__(self, data=None):
                    self.data = data
                    self.next = None

            # 链式栈
            class LStack:
                # 构建空栈　－　空节点
                def __init__(self):
                    self._head = Node()
                    self._count = 0

                # 判空
                def is_empty(self):
                    return self._count == 0

                #　判满　(因使用链式结构来实现无固定大小，故不需要判满)

                #　压入数据
                def push(self, elem):
                    # 创建数据节点
                    tmp = Node(elem)
                    # 新节点放人栈中
                    if self.is_empty():
                        self._head = tmp
                    else:
                        tmp.next = self._head
                        self._head = tmp
                    #　栈中数据节点计数加一
                    self._count += 1

                # 弹出数据
                def pop(self):
                    # 需要判断栈是否为空
                    if self.is_empty():
                        raise IndexError("stack error:试图从空栈中弹出数据")
                    else:
                        # 节点数目减一
                        self._count -= 1
                        # 保存数据
                        elem = self._head.data
                        # 栈顶变更
                        self._head = self._head.next
                        # 返回数据
                        return elem


栈结构:
    基本特征:1.只能在一端添加和删除元素，这一端称为栈顶。另一端称为栈底
            2.两个基本操作压入数据push和弹出数据pop,弹出数据相当于删除
              最后插入的数据，也就是说栈实现的是一种后进先出的运算方式
            3.从空栈中弹出数据和向满栈中压入数据都视为一种错误
    
    具体实现:1.基于顺序存储的栈实现
             2.基于链式存储的栈实现
        
队列
    基本特征：
        1.队列可以在两端增删数据，增加元素的一端称为后端，删除数据的一端称为前端
        2.队列的基本操作同样是压入数据和弹出数据，前者相当于插入数据，后者则是删除
            最先插入的数据，也就形成了 先进先出的运算规则
        3.在空队列中弹出数据和在满队中压入数据都视为错误
        4.通常最先和最后插入的元素分别称为队首和队尾来被外界访问
    
    具体实现：
        1.基于顺序存储的队列实现
        2.基于链式存储的队列实现

        class SQueue:
            # 创建空队列
            def __init__(self):
                self._elem = []
            # 判空
            def is_empty(self):
                return self._elem == []
            #　判满　(因使用list无固定大小来实现，故不需要判满)
            # 压入数据
            def push(self, data):
                # 从列表头插入数据
                self._elem.insert(0, data)
            # 弹出数据
            def pop(self):
                # 需要判断队列是否为空
                if self.is_empty():
                    raise IndexError("stack error:试图从空栈中弹出数据")
                # 从列表尾移出数据
                return self._elem.pop()

二叉树
    二叉树是一种最简单的树状结构
  特点：
    1.树中每个结点最多关联两个后继结点，
    2.每个结点关联的后继结点明确的分为左关联结点和右关联结点

  基本概念：
    1.叶结点：二叉树中没有子结点的称为树叶，即叶结点
    2.分支结点：树中除了叶结点之外的都为分支结点
    3.根结点：最上层的结点
    4.子结点：子树的根结点就是子结点
    5.满二叉树：
    6.完全二叉树：除了最下层的结点都达到最大值，且最下层的结点
    7.深度：层数

查找算法：
    1.顺序查找
        基本思路:从第一个元素开始，逐个与要查找的元素进行比对，若比较到两者的值相同时，
                则返回找到的元素下标值，若没有则返回-1。
            评价: 若数据量较大时，查找长度变大，效率低;
                  顺序查找对数据顺序没有要求。

                def linear_search(data, key):
                    lens = len(data)
                    for i in range(lens):
                        if data[i] == key:
                            return i
                    return -1
    2.二分查找 
        要求数据是有序的，二分查找也称为折半查找，属于有序查找的算法 
        基本思路: 用给定要查找的数据与中间数据进行对比，若相等则查找成功，若不相等，
                根据数据与中间数据的比较结果在其左子表或右子表中继续递归查找，直到找到或无数据
        
            评价：1.要求数据必须是有序的，如无序要先排序
                 2.因为二分查找每次将范围减少一半，缩短时间，
                    其时间复杂度是对数级，空间复杂度为常数级


            def binary_search_recur(data, key, left_index, right_index):
                if right_index < left_index:
                    return -1
                middle = (left_index + right_index) // 2
                if data[middle] == key:
                    return middle
                elif data[middle] > key:
                    return binary_search_recur(data, key, left_index, middle-1)
                else:
                    return binary_search_recur(data, key, middle+1, right_index)


            # 循环实现
            def binary_search_loop(data, key):
                left_index = 0
                right_index = len(data) - 1
                while left_index <= right_index:
                    middle = (left_index + right_index) // 2
                    if data[middle] == key:
                        return middle
                    elif data[middle] > key:
                        right_index = middle - 1
                    else:
                        left_index = middle + 1
                return -1

排序算法：
    1.冒泡排序
        基本思路：1.相邻元素两两比较，前者大于后者则交换(大者排后)
                2.第一次遍历，从第一对数据到最后一对数据，将最大值上浮到顶端
                3.后面继续将未排序的部分重复上步骤，依次上浮最大值
                4.每次扫描的元素越来越少，直到不再发生交换为止
            评价：时间复杂度：

    def bubble(data):
        for n in range(len(data)-1):
            for i in range(len(data)-1-n):
                if data[i] > data[i+1]:
                    data[i], data[i+1] = data[i+1], data[i] 

    2.插入排序：
        基本思路：首元素自然有序，取出下一个元素，对排序的序列从后向前扫描
                若扫描有序数据大于被取出的元素，则该有序数据后移，
                若扫描的有序数据小于被取出的元素，在该有序数据后面插入被取出的元素，
                若扫描的所有有序数据大于被取出出的元素，则有序数据的头部插入被取出的元素
                再取出下一个元素，继续重复之前的步骤，直到所有元素都有序为止
 
                时间：O(n2)    空间:o(1)
        def insertion(data):
            for n in range(1, len(data)):
                tmp = data[n]
                for i in range(n, -1, -1):
                    if data[i-1] < tmp or i == 0:
                        break
                    else:
                        data[i] = data[i - 1]
                data[i] = tmp

    3.快速排序：
        算法描述：从待排序的序列中任意选择一个基准
                将所有小于基准的元素、等于和所有大于基准的元素进行分组，小于部分
                放基准前面，大于部分放基准后面
                再以递归的方式，对基准之前和基准之后的分组继续操作，直到每个组的
                元素不多于一个为止

            时间：O(nlogn)  若每次都能均匀分组则快速排序速度是最快的

    4.选择法排序
        算法描述：每次选择出未排序序列段中的最大值(或最小值)的元素，与未排序序列段最前面元素交换，一直到全部排序

                # def xuanzi(L):
                #     x = 0
                #     while x<len(L):
                #         _min = L[x]
                #         for i in L[x:]:
                #             if _min>i:
                #                 _min = i
                #         else:
                #             L[L.index(_min)] = L[x]
                #             L[x] = _min
                #             x+=1
                #     return L
    
    5.交换法排序
        算法描述：选择第一位数，与其后的数一一比较，当有数符合条件这交换位置，让交换位置的数(换为第一位)继续向后比较
                遍历一次后，再第二位数开始以上操作，直到最后一位数。
                        # def jiaohuan(L):
                        #     x = 0
                        #     while x<len(L):
                        #         for i in L[x:]:
                        #             if L[x]>i:
                        #                L[L.index(i)] = L[x]
                        #                L[x] =i
                        #                break
                        #         else:
                        #             x+=1
                        #     return L
    6.折半法排序(二分法)
        算法描述(升序)：选择序列中间值(位置中间的)，从两端[0] 和 [-1]开始分别与中间元素比较。左侧第一个元素与中间值比较，
                小于则取第二个元素比较，大于则交换位置;右侧相反，小于交换位置，大于不换。
                第一次排序后，分左右侧分别折半递归排序，直到完成。



def zheban(L):
    if len(L)<2:
        return L
    mom = L[len(L)//2]
    
L=[3,2,9,15,6,8,1,7]
L=jiaohuan(L)
print(L)
   
            

