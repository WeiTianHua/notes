
# 1.函数在定义的时候会创建引用栈，并没有分配内存空间堆来保存任何变量的值，只有在执行的时候，才会分配空间，保存变量的值。
# 2.PYTHON的作用域由def、class、lambda等语句产生，if、try、for等语句并不会产生新的作用域。
# 3.本地作用域（Local）→外围作用域——即当前作用域是一个内嵌作用域（Enclosing locals）→全局/模块作用域（Global）→内置作用域（Built-in）。
# 4.返回闭包时牢记的一点就是：返回函数不要引用任何外部的循环变量或者后续会发生变化的变量。
#   如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，
#   无论该循环变量后续如何更改，已绑定到函数参数的值不变。

a = [f() for f in [lambda :x for x in range(5)]]
print(a) #[4,4,4,4,4]

#等同
l =[]
a =[]
for x in range(5):
    def aa():
        return x
    l.append(aa)
for f in l:
    a.append(f())
print(a)    #[4,4,4,4,4]

#函数惰性求值和闭包变量域产生的效果

