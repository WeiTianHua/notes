os.sep:取代操作系统特定的路径分隔符

os.name:指示你正在使用的工作平台。比如对于Windows，它是'nt'，而对于Linux/Unix用户，它是'posix'。
os.uname()  获取详细的系统信息,windows不支持

os.environ	操作系统中定义的环境变量，全部保存在这个变量中,已类字典的格式
os.environ.get('key')  要获取某个环境变量的值
os.environ.setdefult('key','*')  要获取某个环境变量的值,没有就设置为'*'
os.getenv()和os.putenv:分别用来读取和设置环境变量

os.path.abspath(name):获得绝对路径
os.path.isabs():判断是否为绝对路径
os.getcwd():得到当前工作目录，即当前python脚本工作的目录路径。
os.curdir:返回当前目录（'.'）
os.chdir(dirname): 改变工作目录到dirname	如果成功返回 True , 否则返回False。

all functions from posix or nt, e.g. unlink, stat, etc.
os.path is either posixpath or ntpath
os.name is either 'posix' or 'nt'
os.curdir is a string representing the current directory (always '.')
os.pardir is a string representing the parent directory (always '..')
os.sep is the (or a most common) pathname separator ('/' or '\\')
os.extsep is the extension separator (always '.')
os.altsep is the alternate pathname separator (None or '/')
os.pathsep is the component separator used in $PATH etc
os.linesep is the line separator in text files ('\r' or '\n' or '\r\n')
os.defpath is the default search path for executables
os.devnull is the file path of the null device ('/dev/null', etc.)
-所有功能从posix或nt，如unlink, stat等。
——操作系统。路径要么是posixpath，要么是ntpath
- os.name要么是'posix'，要么是'nt'
——操作系统。curdir是表示当前目录的字符串(总是')。
——操作系统。pardir是表示父目录的字符串(总是'..')
——操作系统。sep是(或最常见的)路径名分隔符('/'或'\\')
——操作系统。extsep是扩展分隔符(总是')。
——操作系统。altsep是另一个路径名分隔符(None或'/')
——操作系统。pathsep是$PATH等中使用的组件分隔符
——操作系统。linesep是文本文件中的行分隔符('\r'或'\n'或'\r' n')
defpath是可执行文件的默认搜索路径
- os.devnull是空设备的文件路径('/dev/null'等)


os.listdir():返回指定目录下的所有文件和目录名的字典

os.stat（file）:获得文件属性
os.chmod(file):修改文件权限和时间戳
os.rename('test.txt', 'test.py')  对文件重命名
os.remove(file):删除一个文件

os.mkdir(name): 创建目录
os.rmdir(name): 删除目录
os.removedirs（r“c：\python”）:删除多个目录

os.system():运行shell命令
os.exit():终止当前进程
os.linesep:给出当前平台的行终止符。例如，Windows使用'\r\n'，Linux使用'\n'而Mac使用'\r'

os.listdir(dirname):列出dirname下的目录和文件
os.path.split(name):分割文件名与目录（如果你完全使用目录，它也会将最后一个目录作为文件名而分离，同时它不会判断文件或目录是否存在）
os.path.splitext():分离文件名和扩展名
os.path.join(path,name):连接目录与文件名或目录

os.path.basename(path):返回文件名
os.path.dirname(path):返回文件路径
os.path.exists(name):判断是否存在文件或目录name
os.path.isdir(name):判断name是不是目录，不是目录就返回false
os.path.isfile(name):判断name这个文件是否存在，不存在返回false


os.path.getsize(name):或得文件大小，如果name是目录返回0L

os.path.normpath(path):规范path字符串形式


os.path.walk(path, visit, arg)	遍历path，进入每个目录都调用visit函数，
	visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，
	names代表当前目录下的所有文件名，args则为walk的第三个参数

os.link(src, dst) 方法用于创建硬链接，名为参数 dst，指向参数 src
		该方法对于创建一个已存在文件的拷贝是非常有用的。
		src -- 用于创建硬连接的源地址
		dst -- 用于创建硬连接的目标地址
				path = "/var/www/html/foo.txt"
				fd = os.open( path, os.O_RDWR|os.O_CREAT )
				os.close( fd )
				dst = "/tmp/foo.txt"
				os.link( path, dst)

os.open(file, flags[, mode]);方法用于打开一个文件，并且设置需要的打开选项，模式参数mode参数是可选的，默认为 0777。

		参数
		file -- 要打开的文件

		flags -- 该参数可以是以下选项，多个使用 "|" 隔开：

		os.O_RDONLY: 以只读的方式打开
		os.O_WRONLY: 以只写的方式打开
		os.O_RDWR : 以读写的方式打开
		os.O_NONBLOCK: 打开时不阻塞
		os.O_APPEND: 以追加的方式打开
		os.O_CREAT: 创建并打开一个新文件
		os.O_TRUNC: 打开一个文件并截断它的长度为零（必须有写权限）
		os.O_EXCL: 如果指定的文件存在，返回错误
		os.O_SHLOCK: 自动获取共享锁
		os.O_EXLOCK: 自动获取独立锁
		os.O_DIRECT: 消除或减少缓存效果
		os.O_FSYNC : 同步写入
		os.O_NOFOLLOW: 不追踪软链接
		mode -- 类似 chmod()。
		
shutil 模块，os模块的补充
		而本章所讲的shutil则就是对os中文件操作的补充。--移动 复制  打包 压缩 解压，

	1  shutil.copyfileobj(fsrc, fdst[, length=16*1024])    #copy文件内容到另一个文件，可以copy指定大小的内容


	2  shutil.copyfile(src,dst)   #copy文件内容，是不是感觉上面的文件复制很麻烦？还需要自己手动用open函数打开文件，在这里就不需要了，事实上，copyfile调用了copyfileobj

	3  shutil.copymode(src,dst)   #仅copy权限，不更改文件内容，组和用户。

	4  shutil.copystat(src,dst)    #复制所有的状态信息，包括权限，组，用户，时间等

	5  shutil.copy(src,dst)   #复制文件的内容以及权限，先copyfile后copymode

	6  shutil.copy2(src,dst)    #复制文件的内容以及文件的所有状态信息。先copyfile后copystat

	7  shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2,ignore_dangling_symlinks=False)
		#递归的复制文件内容及状态信息

	8  shutil.rmtree(path, ignore_errors=False, onerror=None)   #递归地删除文件

	9  shutil.move(src, dst)    #递归的移动文件

	10  make_archive(base_name, format, root_dir=None, base_dir=None, 
			verbose=0,dry_run=0, owner=None, group=None, logger=None)  #压缩打包

		base_name：    压缩打包后的文件名或者路径名
		format：          压缩或者打包格式    "zip", "tar", "bztar"or "gztar"
		root_dir :         将哪个目录或者文件打包（也就是源文件）





fd.fileno()文件描述符 integer


文件操作


os.mknod("text.txt")：创建空文件
fp = open("text.txt",w):直接打开一个文件，如果文件不存在就创建文件
关于open的模式
w 写方式
a 追加模式打开（从EOF开始，必要时创建新文件）
r+ 以读写模式打开
w+ 以读写模式打开
a+ 以读写模式打开
rb 以二进制读模式打开
wb 以二进制写模式打开 (参见 w )
ab 以二进制追加模式打开 (参见 a )
rb+ 以二进制读写模式打开 (参见 r+ )
wb+ 以二进制读写模式打开 (参见 w+ )
ab+ 以二进制读写模式打开 (参见 a+ )


fp.read([size])  #size为读取的长度，以byte为单位
 
fp.readline([size])  #读一行，如果定义了size，有可能返回的只是一行的一部分
 
fp.readlines([size])  #把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长，也就是说可能只读到文件的一部分。
 
fp.write(str)  #把str写到文件中，write()并不会在str后加上一个换行符
 
fp.writelines(seq)  #把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入，不会在每行后面加上任何东西。
 
fp.close()  #关闭文件。python会在一个文件不用后自动关闭文件，不过这一功能没有保证，最好还是养成自己关闭的习惯。 如果一个文件在关闭后还对其进行操作会产生ValueError
 
fp.flush()  #把缓冲区的内容写入硬盘
 
fp.fileno()  #返回一个长整型的”文件标签“
 
fp.isatty()  #文件是否是一个终端设备文件（unix系统中的）
 
fp.tell()  #返回文件操作标记的当前位置，以文件的开头为原点
 
fp.next()  #返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in file这样的语句时，就是调用next()函数来实现遍历的。
 
fp.seek(offset[,whence])  #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的，一般为正数。但如果提供了whence参数就不一定了，whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意，如果文件以a或a+的模式打开，每次进行写操作时，文件操作标记会自动返回到文件末尾。
 
fp.truncate([size])  #把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大，依据系统的不同可能是不改变文件，也可能是用0把文件补到相应的大小，也可能是以一些随机的内容加上去。
 
目录操作
 
os.mkdir("file")　　创建目录
 
shutil.copyfile("oldfile","newfile")　　复制文件:oldfile和newfile都只能是文件
 
shutil.copy("oldfile","newfile")  oldfile只能是文件夹，newfile可以是文件，也可以是目标目录
 
shutil.copytree("olddir","newdir")  复制文件夹.olddir和newdir都只能是目录，且newdir必须不存在
 
os.rename("oldname","newname")  重命名文件（目录）.文件或目录都是使用这条命令
 
shutil.move("oldpos","newpos")  移动文件（目录）
 
os.rmdir("dir")  只能删除空目录
 
shutil.rmtree("dir")  空目录、有内容的目录都可以删
 
os.chdir("path")  转换目录，换路径



os.stat(path) ：
用于在给定的路径上执行一个系统 stat 的调用。
path：
指定路径
返回值：

st_mode=33206,
st_ino=1688849860619008,
st_dev=690497728,
st_nlink=1,
st_uid=0,
st_gid=0,
st_size=47,
st_atime=1552135012, 
st_mtime=1552135023, 
st_ctime=1552135012)

st_mode: inode 保护模式
-File mode: file type and file mode bits (permissions).
st_ino: inode 节点号。
-Platform dependent, but if non-zero, uniquely identifies the file for a given value of st_dev.
——the inode number on Unix,
——the file index on Windows
st_dev: inode 驻留的设备。
-Identifier of the device on which this file resides.
st_nlink:inode 的链接数。
-Number of hard links.
st_uid: 所有者的用户ID。
-User identifier of the file owner.
st_gid: 所有者的组ID。
-Group identifier of the file owner.
st_size:普通文件以字节为单位的大小；包含等待某些特殊文件的数据。
-Size of the file in bytes, if it is a regular file or a symbolic link. The size of a symbolic link is the length of the pathname it contains, without a terminating null byte.
st_atime: 上次访问的时间。
-Time of most recent access expressed in seconds.
st_mtime: 最后一次修改的时间。
-Time of most recent content modification expressed in seconds.
st_ctime:由操作系统报告的"ctime"。在某些系统上（如Unix）是最新的元数据更改的时间，在其它系统上（如Windows）是创建时间（详细信息参见平台的文档）。
st_atime_ns
-Time of most recent access expressed in nanoseconds as an integer
st_mtime_ns
-Time of most recent content modification expressed in nanoseconds as an integer.
st_ctime_ns
-Platform dependent:
——the time of most recent metadata change on Unix,
——the time of creation on Windows, expressed in nanoseconds as an integer.




time 模块的 strftime 方法来格式化日期
time.localtime(statinfo.st_atime)
os.stat_result(st_mode=33206, st_ino=3659174697378650, st_dev=3993776408, st_nlink=1, st_uid=0, st_gid=0, st_size=3876301, st_atime=1541032563, st_mtime=1541033475, st_ctime=1541032563)
time.struct_time(tm_year=2018, tm_mon=11, tm_mday=1, tm_hour=8, tm_min=36, tm_sec=3, tm_wday=3, tm_yday=305, tm_isdst=0)


print (time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(statinfo.st_atime)))

结果：
2018-11-01 08:36:03

附：格式化符号

%y 两位数的年份表示（00-99）
%Y 四位数的年份表示（000-9999）
%m 月份（01-12）
%d 月内中的一天（0-31）
%H 24小时制小时数（0-23）
%I 12小时制小时数（01-12）
%M 分钟数（00=59）
%S 秒（00-59）
%a本地简化星期名称
%A 本地完整星期名称
%b 本地简化的月份名称
%B 本地完整的月份名称
%c 本地相应的日期表示和时间表示
%j年内的一天（001-366）
%p 本地A.M.或P.M.的等价符
%U 一年中的星期数（00-53）星期天为星期的开始
%w星期（0-6），星期天为星期的开始
%W 一年中的星期数（00-53）星期一为星期的开始
%x 本地相应的日期表示
%X本地相应的时间表示
%Z 当前时区的名称
%% %号本身
