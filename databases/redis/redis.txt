http://www.runoob.com/redis/redis-tutorial.html
Redis 官网：https://redis.io/
Redis 在线测试：http://try.redis.io/

http://www.cnblogs.com/wang-yc/p/5693288.html


Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。

Redis 与其他 key - value 缓存产品有以下三个特点：

	Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。
	Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。
	Redis支持数据的备份，即master-slave模式的数据备份。

Redis 优势
	性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。
	丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。
	原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。
	丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。

Window 下安装
下载地址：https://github.com/MSOpenTech/redis/releases

Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，
这里我们下载 Redis-x64-xxx.zip压缩包到 C 盘，解压后，
将文件夹重新命名为 redis。



打开一个 cmd 窗口 使用 cd 命令切换目录到 C:\redis 运行：

redis-server.exe redis.windows.conf

如果想方便的话，可以把 redis 的路径加到系统的环境变量里，
这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，
如果省略，会启用默认的

这时候另启一个 cmd 窗口，原来的不要关闭，不然就无法访问服务端了。

切换到 redis 目录下运行:

redis-cli.exe -h 127.0.0.1 -p 6379



设置键值对:

set myKey abc

取出键值对:

get myKey





Linux 下安装
下载地址：http://redis.io/download，下载最新稳定版本。

本教程使用的最新文档版本为 2.8.17，下载并安装：

$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz
$ tar xzf redis-2.8.17.tar.gz
$ cd redis-2.8.17
$ make
make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：

下面启动redis服务.

$ cd src
$ ./redis-server
注意这种方式启动redis 使用的是默认配置。也可以通过启动参数告诉redis使用指定配置文件使用下面命令启动。

$ cd src
$ ./redis-server ../redis.conf
redis.conf 是一个默认的配置文件。我们可以根据需要使用自己的配置文件。

启动redis服务进程后，就可以使用测试客户端程序redis-cli和redis服务交互了。 比如：

$ cd src
$ ./redis-cli
redis> set foo bar
OK
redis> get foo
"bar"



Ubuntu 下安装
在 Ubuntu 系统安装 Redis 可以使用以下命令:

$sudo apt-get update
$sudo apt-get install redis-server
启动 Redis
$ redis-server
查看 redis 是否启动？
$ redis-cli
以上命令将打开以下终端：

redis 127.0.0.1:6379>
127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。

redis 127.0.0.1:6379> ping
PONG
以上说明我们已经成功安装了redis。



Redis 配置
Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf。

你可以通过 CONFIG 命令查看或设置配置项。

语法
Redis CONFIG 命令格式如下：

redis 127.0.0.1:6379> CONFIG GET CONFIG_SETTING_NAME
实例
redis 127.0.0.1:6379> CONFIG GET loglevel
1) "loglevel"
2) "notice"

使用 * 号获取所有配置项：
redis 127.0.0.1:6379> CONFIG GET *

编辑配置
你可以通过修改 redis.conf 文件或使用 CONFIG set 命令来修改配置。

语法
CONFIG SET 命令基本语法：

redis 127.0.0.1:6379> CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE


配置 redis 外网可访问
由于 redis 采用的安全策略，默认会只准许本地访问。需要通过简单配置，完成允许外网访问。
修改 redis 的配置文件，将所有 bind 信息全部屏蔽。
# bind 192.168.1.100 10.0.0.1 
# bind 192.168.1.8 
# bind 127.0.0.1
修改完成后，需要重新启动 redis 服务。
修改 Linux 的防火墙(iptables)，开启你的 redis 服务端口，默认是 6379。
-A INPUT -m state –state NEW -m tcp -p tcp –dport 6379 -j ACCEPT 
…… 
-A INPUT -j REJECT –reject-with icmp-host-prohibited
请注意，一定要将 redis 的防火墙配置放在 REJECT 的前面。然后执行 service iptables restart。

至此，就能够链接到 redis 服务，并且能够正确显示了。





Redis 客户端的基本语法为：
$ redis-cli

在远程服务上执行命令
如果需要在远程 redis 服务上执行命令，同样我们使用的也是 redis-cli 命令。
$ redis-cli -h host -p port -a password

有时候会有中文乱码。
要在 redis-cli 后面加上 --raw
redis-cli --raw
就可以避免中文乱码了。





python想操作redis，需要安装第三方模块。

sudo pip3 install redis


(1)操作模式

　　redis提供两个类Redis和StrictRedis, StrictRedis用于实现大部分官方的命令，Redis是StrictRedis的子类，用于向后兼用旧版本。


#!/usr/bin/env python3
#coding:utf8
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
# r = redis.StrictRedis(host='0.0.0.0', port=6379)
# 如果要指定数据库，则 r = redis.StrictRedis(host='0.0.0.0', port=6379, db=0)
r.set('name', 'test')
print(r.get('name'))
# 输出结果
b'test'
str 还是 byte？ 通过上面的简单测试，看到redis 取出的结果默认是字节，
我们可以设定decode_responses=True 改成字符串。


关于编码
class redis.StrictRedis(host='localhost', port=6379, db=0, password=None, 
		socket_timeout=None, connection_pool=None, charset='utf-8', errors='strict', 
		decode_responses=False, unix_socket_path=None)
# 默认redis入库编码是utf-8，如果要修改的话，需要指明 charset 和 decode_responsers 为True. 下面是GBK编码。
 
class  redis.StrictRedis (host='localhost', port=6379, db=0, password=None,
		socket_timeout=None,connection_pool=None,  charset='GBK ' , errors='strict', 
		decode_responses=True)


(2)连接池

redis使用connection pool来管理对一个redis server 的所有连接，避免每次建立，释放连接的开销，默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池。

import redis
pool = redis.ConnectionPool(host='0.0.0.0', port=6379)
r = redis.Redis(connection_pool=pool)
r.set('age', '16')
print(r.get('age'))
# 结果
b'16'
　　

# 使用 StrictRedis 连接池
import redis
pool = redis.ConnectionPool(host='47.92.114.20', port=6379)
r = redis.StrictRedis(connection_pool=pool)
r.set('age', '16')
print(r.get('age'))
# 结果
b'16'

数据操作

String 操作
　　redis中的String在在内存中按照一个name对应一个value来存储的。

set(name, value, ex=None, px=None, nx=False, xx=False)


在Redis中设置值，默认，不存在则创建，存在则修改
参数：
ex，过期时间（秒）
px，过期时间（毫秒）
nx，如果设置为True，则只有name不存在时，当前set操作才执行
xx，如果设置为True，则只有name存在时，岗前set操作才执行
import redis
r = redis.StrictRedis(host='0.0.0.0', port=6379)
r.set('age','20')
print(r.get('age'))
# 结果：
b'20'
setnx(name,value)


设置值，只有name不存在时，执行设置操作（添加）
import redis
r = redis.StrictRedis(host='47.92.114.20', port=6379)
r.setnx('a', 'python') # 第一次设置时，键值a不存在
r.setnx('a', 'golang') # 再次设置，键值a已经存在了
print(r.get('a'))
# 结果
b'python'
setex(name,value,time)


# 设置值
# 参数：
# time，过期时间（数字秒 或 timedelta对象）
 
#!/usr/bin/env python3
#coding:utf8
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.setex('name', 'tom','1')
print (r.get('name'))
结果：
b'yaoyao'
当超过一秒
print (r.get('name'))
结果：
None
psetex(name,time_ms,value)


# 设置值
# 参数：
# time_ms，过期时间（数字毫秒 或 timedelta对象）
 
import redis
import time
r = redis.Redis(host='0.0.0.0', port=6379)
r.psetex('name','1','test')
print (r.get('name'))
time.sleep(0.1)
print(r.get('name'))
结果：
b'test'
None
mset(*args, **kwargs)


#批量设置值 
#如：
#mset(k1='v1', k2='v2')
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.mset(name='tom',age='18')
print(r.get('name'))
print(r.get('age'))
get(name)


#获取值
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.mset(name='tom',age='18')
print(r.get('name'))
print(r.get('age'))
getrange(key, start, end)


# 获取子序列（根据字节获取，非字符）
# 参数：
# name，Redis 的 name
# start，起始位置（字节）
# end，结束位置（字节）
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.set('name','tomhhaha')
res=r.getrange('name',0,3)
print(res)
结果：
b'tomh'
settrange(name,offset,value)


# 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）
# 参数：
# offset，字符串的索引，字节（一个汉字三个字节）
# value，要设置的值
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.set('name','tomname')
r.setrange('name',0,'python')
print(r.get('name'))
结果：
b'pythone'
setbit(name,offset,value)


# 对name对应值的二进制表示的位进行操作
# 参数：
# name，redis的name
# offset，位的索引（将值变换成二进制后再进行索引）
# value，值只能是 1 或 0
# 注：如果在Redis中有一个对应： n1 = "foo"，
#那么字符串foo的二进制表示为：01100110 01101111 01101111
#所以，如果执行 setbit('n1', 7, 1)，则就会将第7位设置为1，
#那么最终二进制则变成 01100111 01101111 01101111，即："goo"
# 扩展，转换二进制表示：# source = "武沛齐"
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.set('name','python')
print(r.get('name'))
r.setbit('name','7','1')
print(r.get('name'))
结果：
b'python'
b'mython'
getbit(name,offset)


# 获取name对应的值的二进制表示中的某位的值 （0或1）
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.set('name','python')
print(r.getbit('name','2'))
结果：
1
bitcount(key,start=None,end=None)


# 获取name对应的值的二进制表示中 1 的个数
# 参数：
# key，Redis的name
# start，位起始位置
# end，位结束位置
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.set('name','python')
rint(r.bitcount('name','0','5'))
结果：
27
bitop(operation,dest,*keys)


# 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值
# 参数：
# operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）
# dest, 新的Redis的name
# *keys,要查找的Redis的name
# 如：
bitop("AND", 'new_name', 'n1', 'n2', 'n3')
# 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.set('n1','11')
r.set('n2','21')
r.set('n3','11')
r.bitop('AND','newname','n1','n2','n3')
print(r.get('newname'))
结果：
b'01'
strlen(name)


# 返回name对应值的字节长度（一个汉字3个字节）
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.set('name','python')
print(r.strlen('name'))
结果：
6
incr(self, name, amount = 1)


# 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。
# 参数：
# name,Redis的name
# amount,自增数（必须是整数）
# 注：同incrby
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.set('age','1')       
print(r.incr('age','2'))
结果：
3
如果没有
print(r.incr('ageno','2'))
结果
2
incrbyfloat(self,name,amount=1.0)


# 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。
# 参数：
# name,Redis的name
# amount,自增数（浮点型）
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.set('byfloat','1')
print(r.incrbyfloat('byfloat','2.0'))
结果：
3.0
decr(self, name, amount=1)


# 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。
# 参数：
# name,Redis的name
# amount,自减数（整数）
import redis
r = redis.Redis(host='0.0.0.0', port=6379)   
r.set('age','11')
print(r.decr('age','2'))
append(key,value)


# 在redis name对应的值后面追加内容
# 参数：
key, redis的name
value, 要追加的字符串
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.set('age','a')
print(r.get('age'))
print(r.append('age','b'))
#结果：
b'a'
2
 

Hash 操作
hset(name,key,value)


# name对应的hash中设置一个键值对（不存在，则创建；否则，修改）
# 参数：
# name，redis的name
# key，name对应的hash中的key
# value，name对应的hash中的value
# 注：
# hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hset('noset','python','11')
print(r.hget('noset','python'))
b'11'
hmset(name,mapping)


# 在name对应的hash中批量设置键值对
# 参数：
# name，redis的name
# mapping，字典，如：{'k1':'v1', 'k2': 'v2'}
# 如：
# r.hmset('xx', {'k1':'v1', 'k2': 'v2'})
 
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hmset('someset',{'k1':'v1','k2':'v2'})
print(r.hmget('someset','k1','k2'))
结果：
[b'v1', b'v2']
hget(name,key)


# 在name对应的hash中获取根据key获取value
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hset('noset','python','11')
print(r.hget('noset','python'))
b'11'
hmget(name,keys,*args)


# 在name对应的hash中获取多个key的值
# 参数：
# name，reids对应的name
# keys，要获取key集合，如：['k1', 'k2', 'k3']
# *args，要获取的key，如：k1,k2,k3
# 如：
# r.mget('xx', ['k1', 'k2'])
# 或
# print r.hmget('xx', 'k1', 'k2')
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hset('noset','python','11')
print(r.hget('noset','python'))
b'11'
hgetall(name)


#获取name对应hash的所有键值
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hmset('someset',{'k1':'v1','k2':'v2'})
print(r.hgetall('someset'))
结果：
{b'k2': b'v2', b'k1': b'v1'}
hlen(name)


# 获取name对应的hash中键值对的个数
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hmset('someset',{'k1':'v1','k2':'v2'})
print(r.hlen('someset'))
结果：
2
hkeys(name)


# 获取name对应的hash中所有的key的值
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hmset('someset',{'k1':'v1','k2':'v2'})
print(r.hkeys('someset'))
结果：
[b'k2', b'k1']
hvals(name)


# 获取name对应的hash中所有的value的值
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hmset('someset',{'k1':'v1','k2':'v2'})
print(r.hvals('someset'))
结果：
[b'v2', b'v1']
hexists(name,key)


# 检查name对应的hash是否存在当前传入的key
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hmset('someset',{'k1':'v1','k2':'v2'})       
print(r.hexists('someset','k1'))
结果：
True
hdel(name,*key)


# 将name对应的hash中指定key的键值对删除
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hmset('someset',{'k1':'v1','k2':'v2'})
print(r.hdel('someset','k1'))
print(r.hget('someset','k1'))
结果：
1
None
hincrby(name,key,amount=1)


# 自增name对应的hash中的指定key的值，不存在则创建key=amount
# 参数：
# name，redis中的name
# key， hash对应的key
#amount，自增数（整数）
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hmset('someset',{'k1':'1','k2':'v2'})
r.hincrby('someset','k1','2')
print(r.hget('someset','k1'))
结果：
b'3'
hincrbyfloat(name,key,amount=1.0)
?

# 自增name对应的hash中的指定key的值，不存在则创建key=amount
# 参数：
# name，redis中的name
# key， hash对应的key
# amount，自增数（浮点数）
# 自增name对应的hash中的指定key的值，不存在则创建key=amount
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hmset('someset',{'k1':'1.0','k2':'v2'})
print(r.hincrbyfloat('someset','k1','2.0'))
结果：
3.0
hscan(name,cursor=0,match=None,count=None)


# 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，   
#并非一次       性将数据全部获取完，从而放置内存被撑爆
# 参数：
# name，redis的name
# cursor，游标（基于游标分批取获取数据）
# match，匹配指定key，默认None 表示所有的key
# count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数
 
# 如：
# 第一次：cursor1, data1 = r.hscan('xx', cursor=0, match=None, count=None)
# 第二次：cursor2, data1 = r.hscan('xx', cursor=cursor1, match=None, count=None)
# ...
# 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hmset('someset',{'k1':'1.0','k2':'v2'})
print(r.hscan('someset',cursor=2, match=0, count=5))
hscan_iter(name,match=None,count=None)


# 利用yield封装hscan创建生成器，实现分批去redis中获取数据
# 参数：
# match，匹配指定key，默认None 表示所有的key
# count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数
# 如：
# for item in r.hscan_iter('xx'):
#     print item
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.hmset('someset',{'k1':'1.0','k2':'v2'})
for i in  r.hscan_iter('someset',match=None, count=None):
    print(i)
结果：
(b'k2', b'v2')
(b'k1', b'1.0')
 

List操作
lpush(name,values)


# 在name对应的list中添加元素，每个新的元素都添加到列表的最左边
 
# 如：
# r.lpush('oo', 11,22,33)
# 保存顺序为: 33,22,11
# 扩展：
# rpush(name, values) 表示从右向左操作
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.lpush('num','33','44','55')
print(r.lrange('num','0','2'))
结果：
[b'55', b'44', b'33']
lpushx(name,value)


# 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边
# 更多：
# rpushx(name, value) 表示从右向左操作
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.lpushx('num','33')   
print(r.lindex('num','0'))
结果：
b'33'
llen(name)


# name对应的list元素的个数
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.lpush('num','33','44','55')
print(r.llen('num'))
结果:
10
linsert(name,where,refvalue,value)


# 在name对应的列表的某一个值前或后插入一个新值
# 参数：
# name，redis的name
# where，BEFORE或AFTER
# refvalue，标杆值，即：在它前后插入数据
# value，要插入的数据
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.lpush('num','33','44','55')
r.linsert('num','AFTER','55','66')
print(r.lrange('num','0','3')) 
结果:
[b'55', b'66', b'44', b'33']
r.lset(name,index,value)


# 对name对应的list中的某一个索引位置重新赋值
 
# 参数：
# name，redis的name
# index，list的索引位置
# value，要设置的值
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.lpush('num','33','44','55')
r.lset('num','0','1')
print(r.lrange('num','0','3'))
结果：
[b'1', b'44', b'33', b'55']
r.lrem(name,value,num)


在name对应的list中删除指定的值
 
# 参数：
# name，redis的name
# value，要删除的值
# num，  num=0，删除列表中所有的指定值；
# num=2,从前到后，删除2个；
# num=-2,从后向前，删除2个;
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.lpush('num','33','44','55')
r.lrem('num','33',num=1)
print(r.lrange('num','0','2'))
结果：
[b'55', b'44', b'55']
lpop(name)


# 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素
# 更多：
# rpop(name) 表示从右向左操作
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.lpush('num','33','44','55')
print(r.lpop('num'))
b'55'
lindex(name,index)


#在name对应的列表中根据索引获取列表元素
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.lpushx('num','33')   
print(r.lindex('num','0'))
结果：
b'33'
ltrim(name,start,end)


#在name对应的列表中移除没有在start-end索引之间的值
# 参数：
# name，redis的name
# start，索引的起始位置
# end，索引结束位置
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.lpush('num','33','44','55')
r.ltrim('num','0',1)
print(r.lrange('num','0','2'))
lrange(name,start,end)

# 在name对应的列表分片获取数据
# 参数：
# name，redis的name
# start，索引的起始位置
# end，索引结束位置
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.lpush('num','33','44','55')
print(r.lrange('num','0','2'))
结果：
[b'55', b'44', b'33']
rpoplpush(src,dst)


# 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边
# 参数：
# src，要取数据的列表的name
# dst，要添加数据的列表的name
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.lpush('num1','11','22','33')
r.lpush('num2','44','55','66')
r.rpoplpush('num1','num2')
print(r.lrange('num1','0','2'))
print(r.lrange('num2','0','3'))
结果：
[b'33', b'22', b'11']
[b'33', b'66', b'55', b'44']
blpop(keys,timeout)


# 将多个列表排列，按照从左到右去pop对应列表的元素
# 参数：
# keys，redis的name的集合
# timeout，超时时间，当元素所有列表的元素获取完之后，
阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞
# 更多：
# r.brpop(keys, timeout)，从右向左获取数据
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.lpush('num1','11','22','33')
print(r.blpop('num1',timeout=3))
结果：
(b'num1', b'33')
brpoplpush(src,dst,timeout=0)


# 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧
    # 参数：
    # src，取出并要移除元素的列表对应的name
    # dst，要插入元素的列表对应的name
    # timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞
    自定义增量迭代
    # 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：
    # 1、获取name对应的所有列表
    # 2、循环列表
    # 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，
    所有有必要自定义一个增量迭代的功能：
 
    def list_iter(name):
    """
    自定义redis列表增量迭代
    :param name: redis中的name，即：迭代name对应的列表
    :return: yield 返回 列表元素
    """
     
    list_count = r.llen(name)
    for index in xrange(list_count):
        yield r.lindex(name, index)
 
    #使用
    for item in list_iter('pp'):
            print (item)
　　

Set操作
　　set集合不允许重复的列表

sadd(name,values)


# name对应的集合中添加元素
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex','11')
print(r.smembers('sex'))
结果：
{b'11'}
scard(name)


#获取name对应的集合中元素个数
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex','11')
print(r.scard('sex'))
结果：
1
sdiff(keys,*args)


#在第一个name对应的集合中且不在其他name对应的集合的元素集合
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex1','11','22','33')
r.sadd('sex2','22','33','55')
print(r.sdiff('sex1','sex2'))
结果:
{b'11'}
sdiffstore(dest,keys,*args)


# 获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex1','11','44','33')
r.sadd('sex2','22','33','55')
r.sadd('sex3','66','77','88')
r.sdiffstore('sex4','sex1','sex2','sex3')
print(r.smembers('sex4'))
结果：
{b'44', b'11'}
sinter(keys,*args)


# 获取多一个name对应集合的并集
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex1','11','44','33')
r.sadd('sex2','22','33','55')
r.sadd('sex3','66','77','88')
r.sinter('sex1','sex2',)
print(r.smembers('sex1'))
结果：
{b'44', b'11', b'22', b'33'}
sinterstore(dest,keys.*args)


# 获取多一个name对应集合的并集，再讲其加入到dest对应的集合中        
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex1','11','44','33')
r.sadd('sex2','22','33','55')
r.sinterstore('sex4','sex1','sex2')
print(r.smembers('sex4'))
sismember(name,value)


# 检查value是否是name对应的集合的成员
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex1','11','44','33')
print(r.sismember('sex1','11'))
结果：
True
smembers(name)


# 获取name对应的集合的所有成员
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex1','11','44','33')
print(r.smembers('sex1'))
结果：
{b'11', b'44', b'33', b'22'}
smove(src,dst,value)


# 将某个成员从一个集合中移动到另外一个集合
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex1','11','44','33')
r.sadd('sex2','22','55','66')
r.smove('sex1','sex2','11')
print(r.smembers('sex2'))
spop(name)


# 从集合的右侧（尾部）移除一个成员，并将其返回
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex1','11','44','33')
print(r.smembers('sex1'))
print(r.spop('sex1'))
srandmember(name,numbers)


# 从name对应的集合中随机获取 numbers 个元素
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex1','11','44','33')
print(r.srandmember('sex1','2'))
结果：
[b'44', b'11']
srem(name,values)


# 在name对应的集合中删除某些值
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex1','11','44','33')
r.srem('sex1','11')
print(r.smembers('sex1'))
结果：
{b'44', b'33'}
sunion(keys,*args)


# 获取多一个name对应的集合的并集
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex1','11','44','33')
r.srem('sex2','11','55','66')
print(r.sunion('sex1','sex2'))
结果：
{b'11', b'22', b'44', b'33'}
sunionstore(dest,keys,*args)


# 获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.sadd('sex1','11','44','33')
r.srem('sex2','11','55','66')
r.sunionstore('sex3','sex1','sex2')
print(r.smembers('sex3'))
结果：
{b'22', b'11', b'33', b'44'}
sscan(name,cursor=0,match=None,count=None)

1
# 同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大
sscan_iter(name,match=None,count=None)

1
# 同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大
　　

有序集合操作
　　在集合的基础上，为每个元素排序，元素的排序需要根据另外一个值来进行比较，所以，对于有序集合，每一个元素有两个值，即：值和分数，分数专门用来做排序。

zadd(name,*args,**kwargs)


# 在name对应的有序集合中添加元素
# 如：   
# zadd('zz', 'n1', 1, 'n2', 2)
# 或
# zadd('zz', n1=11, n2=22)
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.zadd('znum', n1=11, n2=22,n3=33)
zcard(name)


# 获取name对应的有序集合元素的数量
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.zadd('znum', n1=11, n2=22,n3=33)
print(r.zcard('znum'))
zcount(name,min,max)


# 获取name对应的有序集合中分数 在 [min,max] 之间的个数
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.zadd('znum', n1=11, n2=22,n3=33)
print(r.zcount('znum','11','22'))
结果：
2
zincrby(name,value,amount)


# 自增name对应的有序集合的 name 对应的分数
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.zadd('znum', n1=11, n2=22,n3=33)
print(r.zincrby('znum','22','1'))
结果：
1.0
r.zrange(name, start, end, desc=False, withscores=Flase, score_cast_func=float)


# 按照索引范围获取name对应的有序集合的元素
# 参数：
# name，redis的name
# start，有序集合索引起始位置（非分数）
# end，有序集合索引结束位置（非分数）
# desc，排序规则，默认按照分数从小到大排序
# withscores，是否获取元素的分数，默认只获取元素的值
# score_cast_func，对分数进行数据转换的函数
# 更多：
# 从大到小排序
# zrevrange(name, start, end, withscores=False, score_cast_func=float)
# 按照分数范围获取name对应的有序集合的元素
# zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)
# 从大到小排序
# zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.zadd('znum', n1=22, n2=33,n3=11)
print(r.zrevrange('znum','0', '2', withscores=False, score_cast_func=float))
结果：
[b'n2', b'n1', b'n3']
zrank(name, value)


# 获取某个值在 name对应的有序集合中的排行（从 0 开始）
import redis       
r = redis.Redis(host='localhost', port=6379)
r.zadd('znum', n1=22, n2=33,n3=11)
print(r.zrank('znum','22'))
结果：
0
# 更多：
#zrevrank(name, value)，从大到小排序
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.zadd('znum', n1=22, n2=33,n3=11)
print(r.zrevrank('znum','22')) 
结果：
zrangebylex(name, min, max, start=None, num=None)


# 当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的 值
#（lexicographical ordering）来进行排序，而这个命令则可以返回给定的有序集合键
# key 中， 元素的值介于 min 和 max 之间的成员
# 对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。 如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大
# 参数：
# name，redis的name
# min，左区间（值）。 + 表示正无限； - 表示负无限； ( 表示开区间； [ 则表示闭区间
# min，右区间（值）
# start，对结果进行分片处理，索引位置
# num，对结果进行分片处理，索引后面的num个元素
# 如：
# ZADD myzset 0 aa 0 ba 0 ca 0 da 0 ea 0 fa 0 ga
# r.zrangebylex('myzset', "-", "[ca") 结果为：['aa', 'ba', 'ca']
 
# 更多：
# 从大到小排序
# zrevrangebylex(name, max, min, start=None, num=None)
zrem(name, values)

1
2
# 删除name对应的有序集合中值是values的成员
# 如：zrem('zz', ['s1', 's2'])
zremrangebyrank(name, min, max)

1
# 根据排行范围删除
zremrangebyscore(name, min, max)

1
# 根据分数范围删除
zremrangebylex(name, min, max)

1
# 根据值返回删除
zscore(name, values)

1
# 获取name对应有序集合中 value 对应的分数
zinterstore(dest, keys, aggregate=None)

1
2
# 获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作
# aggregate的值为:  SUM  MIN  MAX
zunionstore(dest, keys, aggregate=None)

1
2
# 获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作
# aggregate的值为:  SUM  MIN  MAX
zscan(name, cursor=0, match=None, count=None, score_cast_func=float)

1
# 同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作
zscan_iter(name, match=None, count=None,score_cast_func=float)

1
# 同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作 
　　

 其他常用操作
delete(*name)


# 根据删除redis中的任意数据类型
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.set('num','11')
print(r.get('num'))
r.delete('num')
print(r.get('num'))
结果：
b'11'
None
exists(name)


# 检测redis的name是否存在
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.set('num','11')
print(r.get('num'))
print(r.exists('num'))
r.delete('num')
print(r.get('num'))
print(r.exists('num'))
b'11'
True
None
False
keys(pattern='*')


# 根据模型获取redis的name
 
# 更多：
# KEYS * 匹配数据库中所有 key 。
# KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。
# KEYS h*llo 匹配 hllo 和 heeeeello 等。
# KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
print(r.keys(pattern='*'))
结果：
[b'foo', b'num2', b'sex1', b'someset', b'noset', b'sex2', b'num',
b'role', b'name', b'num1', b'n3', b'newname', b'byfloat', b'n2',
b'ageno', b'name1', b'sex4', b'sex3', b'age', b'sex']
expire(name,time)

1
# 为某个redis的某个name设置超时时间
rename(src, dst)


# 对redis的name重命名为
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
r.set('xin','11')
print(r.get('xin'))
r.rename('xin','xin1')
print(r.get('xin1'))
结果：
b'11'
b'11'
move(name,db)

1
# 将redis的某个值移动到指定的db下
randomkey()


# 随机获取一个redis的name（不删除）
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
print(r.randomkey())
结果：
b'n2'
type(name)


# 获取name对应值的类型
import redis
r = redis.Redis(host='0.0.0.0', port=6379)
print(r.type('num'))
结果：
b'string'
scan(cursor=0,match=None,count=None)

1
# 同字符串操作，用于增量迭代获取key
scan_iter(match=None,count=None)

1
# 同字符串操作，用于增量迭代获取key
 

管道
　　redis默认在执行每次请求都会创建（连接池申请链接）和断开（归还连接池）一次连接操作，如果想要再一次请求中指定多个命令，则可以使用pipline实现一次请求指定多个命令，并且默认情况下一次pipline是原子性操作。


#!/usr/bin/env python
    # -*- coding:utf-8 -*-
 
    import redis
 
    pool = redis.ConnectionPool(host='0.0.0.0', port=6379)
 
    r = redis.Redis(connection_pool=pool)
 
    # pipe = r.pipeline(transaction=False)
    pipe = r.pipeline(transaction=True)
 
    r.set('name', 'python')
    r.set('age', '18')
 
    pipe.execute()
　　

发布与订阅


发布者：服务器

订阅者：Dashboad和数据处理

demo


#!/usr/bin/env python
# -*- coding:utf-8 -*-
import redis
class RedisHelper:
    '''类'''
    def __init__(self):
        #链接
        self.__conn = redis.Redis(host='0.0.0.0')
        self.chan_sub = 'fm104.5'
        #创建频道
        self.chan_pub = 'fm104.5'
 
    def public(self,info):
        '''公共的'''
        self.__conn.publish(self.chan_pub,info)
        '''将内容发布到频道'''
        return True
 
    def subscribe(self):
        pub = self.__conn.pubsub()
        pub.subscribe(self.chan_sub)
        pub.parse_response()
        return pub
发布者

#!/usr/bin/env python
# -*- coding:utf-8 -*- 
#导入模块
from redis_demo.demo import RedisHelper
#实例化
obj = RedisHelper()
#把内容发布到频道
obj.public('python')
订阅者


#!/usr/bin/env python
# -*- coding:utf-8 -*-
from redis_demo.demo import RedisHelper
 
obj = RedisHelper()
redis_sub = obj.subscribe()
 
while True:
    msg= redis_sub.parse_response()
    print (msg)
    print(type(msg))




Redis 数据备份与恢复
Redis SAVE 命令用于创建当前数据库的备份。

语法
redis Save 命令基本语法如下：

redis 127.0.0.1:6379> SAVE 
实例
redis 127.0.0.1:6379> SAVE 
OK
该命令将在 redis 安装目录中创建dump.rdb文件。

恢复数据
如果需要恢复数据，只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。获取 redis 目录可以使用 CONFIG 命令，如下所示：
 
redis 127.0.0.1:6379> CONFIG GET dir
1) "dir"
2) "/usr/local/redis/bin"
以上命令 CONFIG GET dir 输出的 redis 安装目录为 /usr/local/redis/bin。

Bgsave
创建 redis 备份文件也可以使用命令 BGSAVE，该命令在后台执行。

实例
127.0.0.1:6379> BGSAVE

Background saving started