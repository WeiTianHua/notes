Redis
是一个完全开源免费，遵守BSD协议的，高性能的key-value数据库
BSD开源协议是一种给予使用者很大自由的协议。可以自由使用、修改源代码、也可以将修改后的代码作为开源或专有软件再次发布。
当发布使用了BSD协议的代码，或以BSD代码为基础做二次开发的产品时需要满足三个条件：
1如果发布的产品中包含源代码，则在源代码中必须带有原来代码的BSD协议
2如果再发布的只是二进制类库/软件，则需要在类库/软件版权声明中包含原来代码的BSD协议
3不可以使用开源代码作者、机构名称和原来产品名称做市场推广

Redis与其他key-value缓存数据库的特点：
持久化
多数据结构储存
支持数据备份

Redis优势
性能极高：Redis读的速度：110000次/s，写的速度：81000次/s
丰富的数据类型：String,Lists,Hashes,Sets...
原子：redis的所有操作都是原子性的。
丰富的特性：redis支持通知、key过期等特性



Redis
安装redis服务
sudo apt-get install redis-server

启动redis服务
redis-server

命令行
redis-cli

在远程服务上执行命令
redis-cli -h host -p port -a password

redis相关信息查看
redis-benchmark --help

redis测试
redis-benchmark -n 1000000 -q

redis常用指令
存入字符串(返回：ok)
    SET key value
    SET A AAAAAA

获取key对应的value（返回：value）
    GET key
    GET A

存入多个value(返回：ok)
    MSET key1 value1 key2 value2
    MSET B BBBBB C CCCCC

获取多个key对应的value（返回：value1 value2）
    MGET key1 key2
    MGET B C

获取key对应的字符串中的子字符（返回：子字符）
    GETRANGE key start end
    GETRANGE RA 0 3
    GETRANGE RA 0 -1

检查key是否存在(返回：存在1，不存在0)
    EXISTS key
    EXISTS B

返回key值对应的字符串长度（返回：长度）
    STRLEN key
    STRLEN RA

设定过期时间（返回：成功1）
    EXPIRE key second
    EXPIRE A 900

查询剩余时间（返回：以秒为单位剩余时间,过期-2,无限-1）
    TTL key
    TTL A

以毫秒设定过期时间（返回：成功1）
    PEXPIRE key millisecond
    PEXPIRE A 90000

以毫秒查询剩余时间（返回：以毫秒为单位剩余时间,过期-2,无限-1）
    PTTL key
    PTTL A

移除过期时间（返回：成功1）
    PERSIST key
    PERSIST A

将给定的key所对应的value进行复制（返回：旧的value）
    GETSET key newvalue
    GETSET A BBBBBBB

重命名key（返回：ok）
    RENAME key newkey
    RENAME A P

从数据库中返回随机key值（返回：随机key）
    RANDOMKEY
    RANDOMKEY

返回key所存的数据类型(返回：类型)
    TYPE key
    TYPE P

获取全部key值(返回：全部key)
    keys *
    keys *


hash
存储hash表(返回：ok)
    HMSET key field value
    HMSET TEACHER name "chaogege" sex 0 age 38 like "sleep"

获取在哈希表中指定的key值所对应的字段和值（返回：全部字段和值）
    HGETALL key
    HGETALL TEACHER

获取哈希表中指定的字段的值(返回：值)
    HGET key field
    HGET TEACHER age

删除字段
    HDEL key field
    HDEL TEACHER sex

获取key所对应的所有字段（返回：所有field）
    HKEYS key
    HKEYS TEACHER

获取key所对应的所有值（返回：所有value）
    HVALS key
    HVALS TEACHER

查看key所对应的哈希表中字段是否存在(返回：存在1,不存在0)
    HEXISTS key field
    HEXISTS TEACHER name


列表
在列表中添加一个或多个值(返回：元素个数)
    RPUSH key value1 [value2 value3]
    RPUSH WANG li zhao lv wei

将一个或多个元素插入列表头部
    LPUSH key value1 [value2 value3]
    LPUSH WANG ming peiqi

在列表中插入一个元素到指定元素的位置上
    LINSERT key BEFORE|AFTER pivot value
    LINSERT WANG BEFORE lv meng

通过索引获取元素(返回：元素)
    LINDEX key index
    LINDEX WANG 2

获取范围内元素(返回：元素)
    LRANGE key start end
    LRANGE WANG 0 -1

移出列表第一个元素(返回：移出的元素)
    LPOP key
    LPOP WANG

移出列表最后一个元素（返回：移出的元素）
    RPOP key
    RPOP WANG

获取列表长度
    LLEN key
    LLEN WANG

有序集合
向有序集合中添加一个或多个成员
    ZADD key score1 member1 [score2 member2]
    ZADD DRIVE 100 zhao 59 wang 32 lv

获取有序集合成员个数
    ZCARD key
    ZCARD DRIVE

向有序集合中对指定成员分数加上增量
    ZINCRBY key increment member
    ZINCRBY DRIVE 1 wang

通过索引区间获取有序集合指定区间内成员
    ZRANGE key start end
    ZRANGE DRIVE 0 -1

移出有序集合中指定的成员
    ZREM key member
    ZREM key meng

显示成员加分数
    ZRANGE key start end WITHSCORES
    ZRANGE DRIVE 0 -1 WITHSCORES

通过索引区间获取有序集合指定区间内成员，分数从高到低
    ZREVRANGE key start end
    ZREVRANGE DRIVE 0 -1

redis事务
事务可以一次执行多个命令

一个事务从开始到执行会经历的阶段：
开始事务
命令入队
执行事务

DEMO
    MULTI
    SET K KKKKKKKK
    SET M MMMMMMMM
    SET Z ZZZZZZZZ
    GET K
    GET M
    GET Z
    EXEC


连接方式：
严格连接模式： r = redis.StrictRedis(host="",port=)
python化连接模式： r = redis.Redis(host="",port=)

连接池：
为了节省资源，减少多次连接损耗，连接池作用相当于总揽多个客户端与服务端的连接，当新客户端需要连接的时候，只需要到连接池中获取一个连接即可。实际上只是一个连接共享给多个客户端
demo

import redis

pool = redis.ConnectionPool(host="localhost", port=6379, decode_responses=True)
r = redis.Redis(connection_pool=pool)
r2 = redis.Redis(connection_pool=pool)
r.set('wang','lixiaochao')
print(r.get('wang'))
r2.set('zhao','wangxiaochao')
print(r2.get('zhao'))

print('##################')
print(r.client_list())
print('##################')
print(r2.client_list())


管道:

demo
import redis, time

r = redis.Redis(host="localhost", port=6379, decode_responses=True)
r.set('wangwc','wanglaoshi')
pipe = r.pipeline(transaction=True)

pipe.set('p1','v1')
pipe.set('p2','v2')
pipe.set('p3','v3')
pipe.set('wangwc','shuaiwang')
print(r.get('wangwc'))
time.sleep(5)
pipe.execute()
print('@@@@@@@@@@@@@@@@')
print(r.get('wangwc'))



























































