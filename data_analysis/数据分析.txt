徐铭 	15201603213 		xuming@tedu.cn

markdown-Typora

什么是数据分析
	数据分析是指用适当的统计分析方法对收集来的大量数据进行分析，
	提取有用的信息形成结论，并对数据加以详细研究和概括总结的过程。
	
使用python做数据分析的常用库
	1. numpy			处理基础数值算法
	2.scipy				处理科学计算
	3.matplotlib		实现数据可视化
	4.pandas			提供了序列高级函数R
	
	
Numpy概述
	全称: Numerical  Python (数值的python)，补充了python语言欠缺的数值运算能力
	Numpy是其他数据分析和机器学习库的底层库
	Numpy完全标准C语言实现运算效率充分优化
	Numpy开源免费
	
Numpy的历史
	1. 1995年，Numeric，用于完成Python语言数值运算的扩充
	2. 2001年，Scipy->Numarray,用于完成多维数组运算
	3. 2005年，Numeric + Numarray->Numpy
	4. 2006年，Numpy脱离了Scipy成为一个独立项目
	

Numpy基础
	Numpy的核心: ndarray对象

使用 numpy.ndarray对象表示一个数组
	创建ndarray对象  array()方法
		语法:
			numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)
				object	数组或嵌套的数列
				dtype	数组元素的数据类型，可选
				copy	对象是否需要复制，可选
				order	创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）
				subok	默认返回一个与基类类型一致的数组
				ndmin	指定生成数组的最小维度
		
		import numpy as np

		ary = np.array([1,2,3,4,5])
		print(ary)
		ary = ary*10
		print(ary)

内存中的 ndarray对象
ndarray 的内部结构
	元数据(metadata)存储对目标数组的描述信息:
		data：一个指向数据（内存或内存映射文件中的一块数据）的指针。
		dtype ： 数据类型或元素类型 ，描述在数组中的固定大小值的格子。
		dimensions 维度： 一个表示数组形状（shape）的元组，表示各维度大小的元组。
		dim count 维数：一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要"跨过"的字节数。

	实际数据
		完整的数组数据
	
将实际数据与元数据分开存放，一方面提高了内存空间的使用效率，
另一方面减少了对实际数据的访问频率，提高性能

	# np.arange(起始值，结束值，步长)
	b = np.arange(1,10,1)
	print(b)
	# np.zeros(数组元素个数，dtype='')
	c = np.zeros(10)
	print(c)
	print(c.dtype)
	# np.ones(数组元素个数，dtype='')
	d = np.ones(10,dtype="int64")
	print(d)
	print(d.dtype)
	
ndarray对象属性的基本操作
	数组的维度		array.shape		值为元组类型（页，行，列...）
		可以强行改变数组维度，只改变输出维度，实际存储方式不变
		ary = np.array([[1,2,3,4,5],[1,2,3,4,5]])
		print(ary.shape)	>>(2, 5)
		print(ary)				>>[[1 2 3 4 5] [1 2 3 4 5]]
		ary.shape =(10,)
		print(ary,ary.shape)		>>[1 2 3 4 5 1 2 3 4 5] (10,)
		ary = ary*10
		print(ary.size)			>>10
		
		
	元素的类型		array.dtype
	
	数组元素的个数	array.size		(实际数据元素个数，递归每个维度)
	Python  len()返回的是第一维元素的个数，不递归
	
	数组的索引	array[0][0]... 或 array[0,0,...]
	
遍历多维数组
	ary = np.arange(1,28)
	ary.shape=(3,3,3)
	for i in range(ary.shape[0]):
		for j in range(ary.shape[1]):
			for k in range(ary.shape[2]):
				print(ary[i,j,k],end=" ")
				
ndarray对象属性操作详解
	Numpy内置的基本数据类型
		类型名		   				类型表示符
		布尔型							bool
		有符号整型					int8(-128~127)/int16/int32/int64
		无符号整形					uint8（0~255）/uint16/uint32/uint64
		浮点型							float16/float32/float64
		复数类型						complex64/complex128
		字符串类型					str_	每个字符串用32位的Unicode编码表示
		
	ndarray不支持自定义对象，必须是数值类型的数据，默认数组的元素是同质，异质会报错
	
	
numpy自定义复合类型
		案例 ： 在numpy中存储三位同学的信息
		
		data = [('张三',[10,15,2],3),
					('李四',[11,16,3],13),
					('王五',[12,17,4],23)]
				
	第一种方式：
		a = np.array(data,dtype="U2,3int32,int32")	#指定每一个元素的数据类型
					#U2 : 表示有两个Unicode字符，取数组中同列最长的一个的长度
					#3int32：表示元素为数组，有三个为int32类型的元素,取数组中同列最长的一个的长度
		print(a,"张三的年龄:",a[0]['f2'])	#f2 表示第三个字段
	
	第二种方式:
		b = np.array(data,dtype=[('name','str_',2),
												  ('scores','int32',3),
												  ('age','int32',1)])					
		print(a,"张三的年龄:",a[0]['age'])
		
	第三种方式
		c = np.array(data,dtype={'names' : ['name','scores','age'],
												  'formats' : ['U2','3int32','int32']})							
		print(a,"张三的年龄:",a[0][age'])
		
	第四种方式
		d = np.array(data, dtype={
											'name':('U2',0),					#U2占8个字节， 与scores字段中间空8个字节
											'scores' : ('3int32',16),			#scores字段在存储时将会从第16个字节开始输出分数列表数据，
											'age' : ('int32',28)				# age 字段将会从第28个字节开始向后输出
											})
			
			#	0,16,28 代表字节数，表示从第几个字节开始输出
			#	这种数据存储对齐方式 的做法在数据访问时会提高效率
			
	第五种方式
		e = np.array([0x1234,0x5678],dtype=('u2',{'lowc':('u1',0),'highc':('u1',1)}))
		print('%x'%e[0])				>>1234
		print('%x'%e['lowc'][0])	>>34
		print('%x'%e['highc'][0])	>>12
		print('%x'%e['highc'][1])	>>56
		
astype()方法把对象当做某类型，不改变原数据的类型，返回指定类型

nbarray对象处理日期类型元素
	f = np.array(['2018','2019-01-01','2019-02-01','2019-01-02 01:01:01'])
	
	#把 f 数组的元素类型改为日期类型
	g = f.astype('M8[s]') 
	print(f)
	print(g)#g.dtype为datetime64[s]
	
	h = g.astype('int32')
	print(h)  #1514764800 以g的时间类型为单位输出当前时间戳,以时间元年开始计算
	
	g = f.astype('M8[Y]')
	h = g.astype('int32')
	print(h) 	#48
	
	
类型的简写字符码
		类型名													     字符码
		bool                           								     ?
		int8/int16/int32/int64								i1/i2/i3/i4
		uint8/uint16/uint32/uint64					u1/u2/u3/u4
		float16/float32/float64							f2/f4/f8
		complex64/complex128							c8/c16
		str_															U<字符数>
		datetime64												M8[Y]/[M]/[D]/[h]/[m]/[s]
		
ndarray数组对象的维度操作
	视图变维（数据共享）:	array.reshape()   array.ravel()
			print('-'*50)
			a = np.arange(1,9)
		#视图变维使用的还是原始数组中的数据,原数据改变会改变视图变维得到的数组
			b = a.reshape((2,4))
			print(a)
			a[0]=999
			print(b)
			c = b.ravel()
			print(c)
			
	复制变维(数据独立),并展开数组	： flatten()
			d = b.flatten()
			e = b.flatten().reshape((2,4))
			d[0]=110
			print(d,a)
			print(e)
			
	就地变维 : 直接修改数组维度，不返回新数组 a.shape    a.resize()
			d.shape=(2,8)
			print(d)
			d.resize(2,2,2)
			print(d)
			
ndarray数组的切片操作
	array[起始位置:终止位置:步长]
		步长为正 : 默认从前往后切
		步长为负 : 默认从后往前切
		
		a = np.arange(1,10)
	#切一维数组
		print(a[::-1])
		[9 8 7 6 5 4 3 2 1]
		print(a[:-4:-1])
		[9 8 7]
		print(a[-7::-1])
		[3 2 1]
	#切二维数组
		a.resize(3,3)
		#切除1/2行 与 1/2/3列
		print(a[1:,:])
		#切除1/2行 与 2/3列
		print(a[1:,1:])
	#切多维
			a[:,:,:,,,,,]
	设置步长
			a[1::2,:]
		
ndarray数组的掩码操作
	用布尔数组，长度要和数组一致
	a = np.array([1,2,3,4,5,6,7,8])
	f = np.arange([Ture,False,Ture,False,Ture,False,Ture,False])
	print(a[f])			#[1,3,5,7]
	print(a[a>3])	#[4,5,6,7,8]
	#把1~100中3的倍数或7的倍数都打印出来
	a = np.arange(1,100)
	flag_a = a%3 ==0
	flag_b = a%7 == 0
	print(flag_a)
	print(flag_b)
	flag = np.any([flag_a,flag_b],axis=0)
	print(a[flag])

              	
多维数组的组合与拆分
	垂直方向操作     :  组合np.vstack((a,b))     拆分np.vsplit(c,2)
	水平方向上操作  :		np.hstack((a,b))		np.hsplit(d,2)
	深度方向操作     :		np.dstack((a,b))		np.dsplit(e,2)
	
	import numpy as np
	a = np.arange(1,7).reshape(3,2)
	b = np.arange(7,13).reshape(3,2)
	>>[[1 2][3 4][5 6]]
	>>[[ 7  8][ 9 10][11 12]]
	
	#垂直方向操作
	c = np.vstack((a,b))
	print(c)
	>>[[ 1  2][ 3  4][ 5  6][ 7  8][ 9 10][11 12]]
	a,b = np.vsplit(c,2)	#拆成2份
	print(a,'\n',b)
	>>[[1 2][3 4][5 6]]       [[ 7  8][ 9 10][11 12]]
	
	#水平方向上操作
	d = np.hstack((a,b))
	print(d)
	>>[[ 1  2  7  8],[ 3  4  9 10],[ 5  6 11 12]]
	a,b = np.hsplit(d,2)
	print(a,'\n',b)
	>>[[1 2],[3 4],[5 6]]    [[ 7  8],[ 9 10],[11 12]]
	
	#深度方向操作,二维会在维度上加一维成三维
	e = np.dstack((a,b))
	print(e)	
	>>[[[ 1  7][ 2  8]],[[ 3  9][ 4 10]],[[ 5 11][ 6 12]]]
	a,b = np.dsplit(e,2)
	print(a,'\n',b)
	>>[[[1][2]],[[3][4]],[[5][6]]]     [[[ 7][ 8]],[[ 9][10]],[[11][12]]]
	

多维数组组合与拆分的相关函数
	组合:   np.concatenate((a,b),axis=0)
		#根据 axis 所指定的轴向(0,1,2)进行多维数组的组合
		#如果待组合的两个数组都是二维数组(方法局限，不能进行深度操作)
		# axis = 0  垂直方向
		# axis = 1  水平方向
		#如果待组合的两个数组都是三维数组
		# axis = 0  垂直方向
		# axis = 1  水平方向
		# axis = 2  深度方向
	
	拆分: np.split(c,2,axis=0|1|2)
		#根据给定的轴向和拆分的份数对 c 数组进行拆分
		
长度不同的两个数组的组合操作
	数组补全方法,返回补全的数组，不改变原始数组
	
	两头插入
	np.pad(ary,								原始数组
				pad_width=(0,1),			补全方式(头部补0个，尾部补1个)
				mode='constant',		设置补全模式为constant
				constant_values=-1	设置补全值的默认值为-1
				)
	中间插入
	np.insert(ary,index,....)
	
	eg:   a = np.arange(1,7)
			b = np.arange(10,16)
			c =np.pad(b,pad_width=(0,1),mode="constant",constant_values=-1)
			print(a)
			print(b)
			print(c)
			>>[1 2 3 4 5 6]
			>>[10 11 12 13 14 15]
			>>[10 11 12 13 14 15 -1]
			
简单的一维数组组合方案
	a = np.arange(1,10)
	b = np.arange(11,20)
	#把 a 与 b 合为两行
	np.row_stack((a,b))
	#把 a 与 b 合为10列
	np.column_stack((a,b))
	
numpy数组的其他属性
	1.  shape			维度
	2.  dtype			元素类型
	3.  size				数组元素个数
	4.  ndim			维数,整数，几维
	5.  itemsize		元素的字节数
	6.  nbytes		元素的总字节数
	7.  real				复数数组的实部
	8.  imag			复数数组的虚部
	9.  T					数组对象的转置视图
	10. flat				返回数组的扁平迭代器
	
	eg:
		a = np.array([[1+1j,2+4j,3+7j],
             [4+2j,5+5j,6+8j,],
             [7+3j,8+6j,9+9j,]]
             )
		print(a.dtype)		>>complex128
		print(a.ndim)		>>2
		print(a.real)			>>[[1. 2. 3.][4. 5. 6.][7. 8. 9.]]
		print(a.imag)		>>[[1. 4. 7.][2. 5. 8.][3. 6. 9.]]
		print(a.imag.T)		>>[[1. 2. 3.][4. 5. 6.][7. 8. 9.]]
		
		
		
		
--------------------------------------------------------------------------------------------------

matplotlib概述
		matplotlib是python的一个绘图库，使用它可以很方便的绘制出版质量级别的图形
	
	matplotlib的基本功能
		1. 基本绘图
			1. 绘制坐标系中连续的线，设置线型/线宽/颜色
			2. 设置坐标轴的范围
			3. 设置坐标刻度
			4. 设置坐标轴
			5. 显示图例
			6. 绘制特殊点
			7. 为图像添加备注
		2. 高级绘图
			1. 绘制子图
			2.绘制刻度定位器
			3. 绘制刻度网格线
			4.半对数坐标
			5.散点图
			6.图像填充
			7.条形图
			8.饼图
		
matplotlib基本功能详解

基本绘图
	绘制一条线的相关API
		import numpy as np
		import matplotlib.pyplot as mp
		#xarray:散点的x坐标数组
		#yarray:散点的y坐标数组
		#linestyle=''	线型值（str_):  - or solid直线   -- or dashed虚线     -. or dashdot点虚线     ： or dot 点线
		#linewidth=1,	线宽值(int) :  数值代表n倍线宽
		#color='',			颜色值（str_|tuple):	red ,black,blue,green英文颜色单词，
								或常见颜色单词首字母,或#ffffff,或(1,1,0.7)或(1,1,1,1)《1代表255》
		#alpha=0.5		透明度值（float):	0(透明)到1 (不透明)
		
		mp.plot(xarray,yarray,linestyle='',linewidth=1,color='',alpha=0.5)
		mp.show()
		
	绘制水平线与垂直线相关API
		mp.vlines(value,ymin,ymax,,,)	
			#绘制一条垂直x轴的线，需要给x坐标的值value，指定y值的范围
		mp.hlines(value,ymin,ymax,,,)
			#绘制一条垂直y轴的线，需要给y坐标的值value，指定x值的范围
		
在-10到10之间均分为10个点
x = np.linspace(-10,10,10)
>>[-10.   -7.77777778  -5.55555556  -3.33333333  -1.11111111    1.11111111   3.33333333   5.55555556   7.77777778  10.    ]
	#绘制一条抛物线
	x = np.linspace(-10,10,1000)
	y = x**2
	mp.plot(x,y)
	mp.show()
	
	#绘制cos 和 sin
	x = np.linspace(-np.pi,np.pi,1000)
	cos_x = np.cos(x)/2
	sin_x = np.sin(x)
	mp.plot(x,cos_x,linestyle='-.',linewidth=1,color='r',alpha=0.8)
	mp.plot(x,sin_x,linestyle=':',linewidth=2,color=(0.2,0.5,0.6),alpha=0.8)
	mp.show()


设置坐标轴的范围
	设置图像的可视区域
		mp.xlim(x_lim_min,x_lim_max)	#最小值和最大值
		mp.ylim(y_lim_min,y_lim_max)
	eg:
		mp.xlim(0,np.pi)
		mp.ylim(0,2)
		
设置坐标刻度
	#设置x轴的坐标刻度
	#x_val_list : 坐标值列表
	#x_text_list : 坐标刻度文本列表
		mp.xticks(x_val_list，x_text_list)
		mp.yticks(y_val_list，y_text_list)
	eg:	
		x_val_ticks = [-np.pi,-np.pi/2,0,np.pi/2,np.pi]
		x_text_ticks = ['-π','-π/2','0','π/2','π']
		mp.xticks(x_val_ticks,x_text_ticks)
	
	刻度文本的特殊语法 -- LaTex排版语法规范
		1.分数表示方式		
			r'$-\frac{\pi}{2}$'	
			
		参考附录
	
设置坐标轴
	坐标轴包含四个: left/right/bottom/top
		
		#getCurrentAxis获取当前坐标轴对象
		ax = mp.gca()
		ax1 = ax.spines['left']
		axr = ax.spines['right']
		...
		
		#设置坐标轴的颜色
			ax1.set_color()	#写 'none'取消坐标轴
		#设置坐标轴的位置
		# ('data',0) 以指标值作为定位参考，设置坐标轴到0的位置
			axl.set_position((type,val))

绘制图例
		# 自动在窗口中某个位置添加图例
		# 添加图例需要在调用mp.plot()绘制曲线时设置label参数
		mp.plot(..., label='y=sin(x)')
	eg:
		mp.plot(x,cos_x,linestyle='-.',linewidth=1,color='r',alpha=0.8,label='y=cos(x)')
		mp.plot(x,sin_x,linestyle=':',linewidth=2,color=(0.2,0.5,0.6),alpha=0.8,label='y=sin(x)')
		mp.legend(loc='best')
		
		# 通过loc参数设置图例的位置
		# ===============   =============
		# Location String   Location Code
		# ===============   =============
		# 'best'           				 0
		# 'upper right'     		 1
		# 'upper left'      			 2
		# 'lower left'      			 3
		# 'lower right'    			 4
		# 'right'          				 5
		# 'center left'    			 6
		# 'center right'    		 7
		# 'lower center'    		 8
		# 'upper center'    		 9
		# 'center'          		    10
		===============   =============
		mp.legend(loc='')


绘制特殊点
	mp.scatter(xarray,yarray,marker='',s=30,edgecolor='',facecolor='',zorder=3)
		# marker 点型,参考附录
		# s   大小
		#  edgecolor 边缘色
		# facecolor  填充色
		#  zorder    绘制顺序,点与线的覆盖问题

		
添加备注文本
	mp.annotate('',						#备注文本
					xycoords='',			#备注目标点使用的坐标
					xy=(x,y),					#备注目标点的坐标
					textcoords='',			#备注文本使用的坐标系
					xytext=(x,y),			#备注文本的坐标
					gontsize=14,			#备注文本字体大小
					arrowprops=dict()	#指示箭头的属性
					)
	arrowprops参数使用字典定义指向目标点的箭头样式
			dict(
				arrowstyle='',			#定义箭头样式,参加 help(mp.annotate)
				connectionstyle=''		#定义引线样式/angle折线/angle3弧线/arc3直线...
			)
			
	eg :
		mp.annotate(r'$\frac{\pi}{2}$',xycoords='data',
            xy=(np.pi/2,1),
            textcoords='offset points',
            xytext=(40,10),
            fontsize=14,
            arrowprops={'arrowstyle':'->','connectionstyle':'arc3'}           
            )
		mp.annotate(r'$(\frac{\pi}{2},0)$',xycoords='data',
            xy=(np.pi/2,0),
            textcoords='offset points',
            xytext=(-40,-40),
            fontsize=14,
            arrowprops={'arrowstyle':'->','connectionstyle':'angle3'}           
            )
			

高级图形窗口对象操作
		figure(num=None, figsize=None, dpi=None, facecolor=None,
					edgecolor=None, frameon=True, FigureClass= figure,
					clear=False， **kwargs)

		创建一个新图形。
		参数 
			num:整数或字符串，可选，默认:无
				如果没有提供，将创建一个新图，并增加图号。figure对象将这个数字保存在“number”属性中。
				如果提供了num，并且具有此id的图已经存在，使其活动，并返回对其的引用。
				如果此图不存在，则创建它并返回它。
				如果num是一个字符串，则窗口标题将设置为该图的“num”。

			figsize:整数元组，可选，默认:无
				宽度，高度(英寸)如果没有提供，默认设置为rc figure.figsize。

			dpi:整数，可选，默认:无
				图形的分辨率。如果没有提供，默认为rc图.dpi。

			facecolor:
				背景颜色。如果没有提供，默认设置为rc figure.facecolor。

			edgecolor:
				边框颜色。如果没有提供，默认设置为rc figure.edgecolor。

			frameon: bool，可选，默认:True
				如果为假，则禁止绘制图形框架。

			FigureClass:派生自matplotlib.figure.Figure的类
				可选地使用自定义图实例。

			clear:bool，可选，默认:False
				如果为真，且该数字已经存在，则清除该数字。

			返回
				figure : Figure

			返回的图实例也将被传递给后台的new_figure_manager，

			它允许将自定义图形类挂钩到pylab接口。其他kwargs将传递给图init函数。

			笔记
				如果您正在创建许多图形，请确保您显式地对未使用的图形调用“close”，因为这将使pylab能够正确地清理内存。
				rcParams定义默认值，这些值可以在matplotlibrc文件中修改



	一次绘制两个窗口
		mp.figure(
						'',						#窗口标题
						figsize=(4,3),	#窗口大小
						facecolor=''		#窗口颜色
		)
		mp.show()
		# mp.figure()方法可以创建多个窗口，每个窗口的标题不同，后续调用mp
			的方法进行绘制时将作用于当前窗口，如果希望修改以前已经创建的窗口，
			可以通过相同窗口标题调用mp.figure()方法把该窗口设置为当前窗口
		语法:
			mp.figure('title')
	设置当前窗口的常用参数
		1. 设置图表标题
			mp.title('',fontsize=18)
		2. 设置窗口中x坐标轴的文本和y坐标轴的文本
			mp.xlabel('',fontsize=12)
			mp.ylabel('',fontsize=12)
		3. 设置刻度参数(刻度字体大小)
			mp.tick_params(labelsize=8)
		4. 设置图表的网格线
			mp.grid(linestyle=':')
		5. 紧凑布局
			mp.tight_layout()
		
	eg:	
		mp.figure('Figure1',figsize=(4,3),facecolor='lightgray')
		mp.figure('Figure2',figsize=(4,3),facecolor='black')
		mp.figure('Figure1')
		mp.title('title',fontsize=18)
		mp.xlabel('data',fontsize=12)
		mp.ylabel('price',fontsize=12)
		mp.tick_params(labelsize=8)
		mp.grid(linestyle=':')
		mp.tight_layout()
		mp.show()
		
绘制子图
	矩阵式布局
			mp.figure('')
		# 开始绘制一个子图
			mp.subplot(rows,cols,num)
		# 通过rows与cols拆分当前窗口，每个子窗口都将分配一个序号 1~ n
			mp.show()
			
		eg:	绘制九宫格
				mp.figure('Subplot Layout',facecolor='gray')
				for i in range(1,10):
					mp.subplot(3,3,i)
					mp.text(0.5,0.5,i,ha='center',va='center',size=36,alpha=0.8)
					mp.xticks([])
					mp.yticks([])
					mp.tight_layout()
				mp.show()	

给子图添加文本
	text(x, y, s, fontdict=None, withdash=False, **kwargs)
	
	mp.text(0.5,0.5,1,ha='center',va='center',size=36,alpha=0.8)
		向坐标轴添加文本。
		将字符串' s '中的文本添加到位于' x '， ' y '， data的轴上坐标。
			参数
				x, y:标量  数据坐标
				s:字符串  文本


				fontdict，可选，默认:无
					用于覆盖默认文本属性的字典。如果fontdict为None，默认值由rc参数决定。


	
	网格式布局
		import matplotlib.gridspec as mg
			mp.figure('')
			gs = mg.GridSpec(rows,cols,num)
		# GridSpec()方法会返回子图的二维数组
		# 通过rows与cols拆分当前窗口
			mp.subplot(gs[0, :2])
		# 通过subplot对子图进行合并	
		# gs[0, :2] 合并0行中的0/1列为子图
			mp.show()
			
			
			import numpy as np
			import matplotlib.pyplot as mp
			import matplotlib.gridspec as mg

			mp.figure('Gird layout', facecolor='gray')
			gs = mg.GridSpec(3, 3)
			mp.subplot(gs[0, :2])
			mp.text(0.5, 0.5, 1, va='center',
						ha='center', size=36)
			mp.xticks([])
			mp.yticks([])
			mp.tight_layout()

			mp.subplot(gs[:2, 2])
			mp.text(0.5, 0.5, 2, va='center',
						ha='center', size=36)
			mp.xticks([])
			mp.yticks([])
			mp.tight_layout()

			mp.subplot(gs[1, 1])
			mp.text(0.5, 0.5, 3, va='center',
						ha='center', size=36)
			mp.xticks([])
			mp.yticks([])
			mp.tight_layout()

			mp.subplot(gs[1:, 0])
			mp.text(0.5, 0.5, 4, va='center',
						ha='center', size=36)
			mp.xticks([])
			mp.yticks([])
			mp.tight_layout()

			mp.subplot(gs[2, 1:])
			mp.text(0.5, 0.5, 5, va='center',
						ha='center', size=36)
			mp.xticks([])
			mp.yticks([])
			mp.tight_layout()
			mp.show()
			
	自由布局
		mp.figure('')
		mp.axes([left_bottom_x,left_bottom_y,w,h])
		# left_bottom_x	子图左下角的横坐标	0~1 相对于可绘图窗口
		# left_bottom_y	子图左下角的纵坐标 0~1	相对于可绘图窗口
		# w 宽度	0~1		相对于可绘图窗口
		# h  高度	0~1		相对于可绘图窗口
		
		
			import matplotlib.pyplot as mp

			mp.figure('Free Layout', facecolor='gray')
			mp.axes([0.4, 0.2, 0.5, 0.5])
			mp.text(0.5, 0.5, 1, va='center',
						ha='center', size=36)
			mp.show()

刻度定位器
		主刻度，次刻度(尺子上的cm为主刻度，mm为次刻度)
		
		ax = mp.gca()
	# 获取当前坐标轴
		ax.xaxis.set_major_locator(mp.NullLocator())
	# 设置x轴的主刻度定位器为NullLocator(),参数为空取消刻度
		ax.x..set_minor_locator(mp.NultipleLocator(0.1))
	# 设置x轴的次刻度定位器为NultipleLocator(),参数为空取消刻度  
	
		案例: 画个数轴
			import numpy as np
			import matplotlib.pyplot as mp

			locators = ['mp.NullLocator()',
						'mp.MaxNLocator(nbins=4)',
						'mp.FixedLocator(locs=[0, 2.5, 5, 7.5, 10])',
						'mp.AutoLocator()',
						'mp.MultipleLocator()',
						'mp.LogLocator(base=2)']

			mp.figure('Locators', facecolor='lightgray')

			for i, locator in enumerate(locators):
				mp.subplot(len(locators), 1, i + 1)
				mp.xlim(0, 10)
				mp.ylim(-10, 10)
				mp.yticks([])

				ax = mp.gca()
				ax.spines['top'].set_color('none')
				ax.spines['left'].set_color('none')
				ax.spines['right'].set_color('none')
				ax.spines['bottom'].set_position(('data', 0))

				ax.xaxis.set_major_locator(eval(locator))
				ax.xaxis.set_minor_locator(mp.MultipleLocator(0.1))
				mp.plot(np.arange(11), np.zeros(11), c='none')
				mp.text(5, 0.3, locator,ha='center', size=12)
				mp.tight_layout()
			mp.show()
		
刻度网格线
	ax = mp.gca()
	ax.grid(
		which='',		#'major' / 'minor'	
		axis='',		#'x' / 'y' / 'both'
		linewidth=1,	# 线宽
		linestyle='',	# 线型
		color='',		
		alpha=0.5
		)

		import numpy as np
		import matplotlib.pyplot as mp

		y = [1, 10, 100, 1000, 100, 10, 1]

		mp.figure('GridLine', facecolor='lightgray')

		mp.subplot(1, 2, 1)
		mp.title('GridLine', fontsize=18)
		mp.xlabel('x', fontsize=14)
		mp.ylabel('y', fontsize=14)
		ax = mp.gca()
		ax.xaxis.set_major_locator(mp.MultipleLocator())
		ax.xaxis.set_minor_locator(mp.MultipleLocator(0.1))
		ax.grid(which='major', axis='both',linewidth=0.75, color='orange')
		ax.grid(which='minor', axis='both',linewidth=0.25, color='orange')
		mp.plot(y, 'o-', c='dodgerblue', label='p')
		mp.legend()
	半对数坐标系
		mp.subplot(1, 2, 2)
		mp.title('GridLine', fontsize=18)
		mp.xlabel('x', fontsize=14)
		mp.ylabel('y', fontsize=14)
		ax = mp.gca()
		ax.xaxis.set_major_locator(mp.MultipleLocator())
		ax.xaxis.set_minor_locator(mp.MultipleLocator(0.1))
		ax.grid(which='major', axis='both',linewidth=0.75, color='orange')
		ax.grid(which='minor', axis='both',linewidth=0.25, color='orange')
		mp.semilogy(y, 'o-', c='dodgerblue', label='p')
		mp.legend()

		mp.show()


半对数坐标系
	y轴将会以指数方式递增.	
	
	mp.figure()
	mp.semilogy(x, y, ....)
	mp.show()
	

绘制散点图
		mp.scatter(xarray, yarray,marker='',s=10,
			color='',edgecolor='',facecolor='',zorder=3)
			
			
	使用numpy.random的normal函数生成符合二项分布的随机数.	
		numpy.random.normal(loc=0.0, scale=1.0, size=None)  
		参数的意义为：
　　		loc:float
　　			概率分布的均值，对应着整个分布的中心center

　　		scale:float
　　			概率分布的标准差，对应于分布的宽度，scale越大越矮胖，scale越小，越瘦高

　　		size:int or tuple of ints
　　			输出的shape，默认为None，只输出一个值
	
			n = 100
			# 172: 期望值
			# 20:  标准差
			# n:   数字生成数量
			
		x = np.random.normal(172, 20, n)
		y = np.random.normal(60, 10, n)
			
	设置点的颜色
		# d的值是一个大于0的数
		# 若所有点计算出的d处于[0-1000]区间
		# 那么绘制该点时所使用的颜色,可以根据d的值去jet颜色映射
		# 表中取值(即如果d取值为500,则使用jet颜色映射表中最中心的颜色值)
		d = (x-172)**2 + (y-60)**2
		mp.scatter(x, y, c=d, cmap='jet')	
		
		
		import numpy as np
		import matplotlib.pyplot as mp

		n = 1000
		x = np.random.normal(172, 20, n)
		y = np.random.normal(60, 10, n)

		mp.figure('Persons', facecolor='gray')
		mp.title('Persons', fontsize=18)
		mp.xlabel('Height', fontsize=14)
		mp.ylabel('Weight', fontsize=14)
		mp.tick_params(labelsize=12)

		d = (x - 172)**2 + (y - 60)**2

		mp.scatter(x, y, c=d, cmap='jet_r', s=40)

		mp.tight_layout()
		mp.show()		
		
			
以分辨率 72 来保存图片
mp.savefig("exercice_2.png",dpi=72)	
	
	
填充	
	以某种颜色自动填充两条曲线的闭合区域
		mp.fill_between(x,				#x 轴水平坐标
									sinx,			# sinx 曲线的y坐标
									cosx,		# cosx 曲线的y坐标
									sinx<conx,	#填充条件为ture时，执行填充操作
									color='',		# 颜色
									alpha=1		# 透明度
								)
								
		案例 : 绘制两条曲线 sinx=sin(x)  cosx=cos(x/2)/2  [0-8π]
		
			'''绘制填充
				sinx=sin(x)   cosx=cos(x/2) / 2  [0-8π]
			'''
			import numpy as np
			import matplotlib.pyplot as mp

			x = np.linspace(0, 8 * np.pi, 1000)
			sinx = np.sin(x)
			cosx = np.cos(x / 2) / 2

			mp.figure("Fill", facecolor='lightgray')
			mp.title("Fill", fontsize=18)
			mp.xlabel('X', fontsize=14)
			mp.ylabel('Y', fontsize=14)
			mp.tick_params(labelsize=10)
			mp.plot(x, sinx, color='dodgerblue',label='y=sin(x)')
			mp.plot(x, cosx, color='orangered',label=r'$y=\frac{cos(\frac{x}{2})}{2}$')
			# 填充
			mp.fill_between(x, sinx, cosx, sinx > cosx,color='dodgerblue', alpha=0.5)
			mp.fill_between(x, sinx, cosx, sinx < cosx,color='orangered', alpha=0.5)


			mp.tight_layout()
			mp.legend()
			mp.show()		
		
条形图(柱状图)
		mp.bar(
					x,						#水平坐标数组(可以微调柱子位置)
					y,						#柱状图高度数组
					width,			    #柱子的宽度0~1,大于1和其他柱子重合
					color='',			#填充颜色
					label='',			#图例文本
					alpha=0.5，
					aliign='edge'	| 'center'   靠左或居中（默认）
				)
		
			import numpy as np
			import matplotlib.pyplot as mp

			apples = [23, 19, 81, 22, 65, 34, 65, 23, 89, 56, 89, 39]
			oranges = [56, 56, 74, 39, 64, 95, 63, 48, 56, 98, 65, 45]

			mp.figure('Bar', facecolor='lightgray')
			mp.title('Bar', fontsize=18)
			mp.xlabel('Month', fontsize=14)
			mp.ylabel('Price', fontsize=14)
			mp.tick_params(labelsize=10)
			mp.grid(linestyle=':', axis='y')

			x = np.arange(len(apples))
			mp.bar(x - 0.2, apples, 0.4,color='dodgerblue', label='Apple')
			mp.bar(x + 0.2, oranges, 0.4,color='orangered', label='Orange')

			mp.xticks(x, ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun','Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])

			mp.legend()
			mp.show()
	

饼状态
		mp.pie(
					values,					#值列表
					spaces,				#扇形之间的间距列表
					labels,					#扇形的标签列表
					colors,					#扇形的颜色列表
					'%d%%',				#所占比例的格式
					shadow=True,		#绘制阴影
					startangle=90,	#逆时针绘制饼状图的起始角度
					radius=1				#半径
			)
	
		案例 ： 绘制饼状图
	
			import numpy as np
			import matplotlib.pyplot as mp

			mp.figure('Pie', facecolor='lightgray')
			mp.title('Pie', fontsize=14)

			values = [26, 17, 21, 29, 11]
			spaces = [0.05, 0.01, 0.01, 0.01, 0.01]
			labels = ['Python', 'JavaScript', 'C++', 'Java', 'PHP']
			colors = ['dodgerblue', 'orangered','limegreen', 'violet', 'gold']
			# 等轴比例绘制
			mp.axis('equal')
			mp.pie(values, spaces, labels, colors,
							'%d%%', shadow=True,
							startangle=90, radius=1)
			mp.legend()
			mp.show()

		

等高线图
		组成等高线需要网格点坐标矩阵，也需要每个点的高度，所以等高线的绘制
		是属于3D数学模型的范畴
		绘制等高图
		mp.contourf(x,y,					# 网格坐标矩阵
							  z,					# 坐标矩阵中每个点的值
							  8,					# 把整个模型的高度等分8份
							  cmap='jet'		#颜色映射
							  )
		绘制等高线
			mp.contour(X, Y, f(X,Y), 8, colors='black', linewidth=.5)
		设置等高线的标签文本
			mp.clabel(cntr, inline_spacing=1,fmt='%.1f', fontsize=10)
		
			import numpy as np
			import matplotlib.pyplot as mp

			n = 1000
			x, y = np.meshgrid(np.linspace(-3, 3, n),np.linspace(-3, 3, n))
			z = (1 - x / 2 + x**5 + y**3) * np.exp(-x**2 - y**2)

			mp.figure('Contour', facecolor='lightgray')
			mp.title('Contour', fontsize=18)
			mp.xlabel('x', fontsize=14)
			mp.ylabel('y', fontsize=14)
			mp.tick_params(labelsize=10)
			mp.grid(linestyle=":")
			mp.contourf(x, y, z, 8, cmap='jet')
			cntr = mp.contour(x, y, z, 8, colors='black',linewidths=0.5)
			# 设置等高线的标签文本
			mp.clabel(cntr, inline_spacing=1,fmt='%.1f', fontsize=10)
			mp.show()



		import numpy as np
		import matplotlib.pyplot as plt

		def f(x,y):
			return (1-x/2+x**5+y**3)*np.exp(-x**2-y**2)	#等高函数

		n = 256
		x = np.linspace(-3,3,n)
		y = np.linspace(-3,3,n)
		X,Y = np.meshgrid(x,y)	#返回点阵

		plt.axes([0.025,0.025,0.95,0.95])

		plt.contourf(X, Y, f(X,Y), 8, alpha=.75, cmap=plt.cm.hot)	#等高视图
		C = plt.contour(X, Y, f(X,Y), 8, colors='black', linewidth=.5)#等高线条
		plt.clabel(C, inline=1, fontsize=10,fmt='%.1f')#设置等高线的标签文本

		plt.xticks([]), plt.yticks([])
		# savefig('../figures/contour_ex.png',dpi=48)
		plt.show()
	

热成像图
		用图形的方式显示矩阵及矩阵中值的大小
			mp.imshow(z,	#矩阵
						cmap='jet',
						origin='upper' 	#默认y轴向下, lower为y轴向上
						)
			
			import numpy as np
			import matplotlib.pyplot as mp

			n = 1000
			x, y = np.meshgrid(np.linspace(-3, 3, n),
                   np.linspace(-3, 3, n))
			z = (1 - x / 2 + x**5 + y**3) * np.exp(-x**2 - y**2)

			mp.figure('Hot', facecolor='lightgray')
			mp.title('Hot', fontsize=18)
			mp.xlabel('x', fontsize=14)
			mp.ylabel('y', fontsize=14)
			mp.tick_params(labelsize=10)
			mp.imshow(z, cmap='jet', origin='lower')
			mp.show()

3D图像绘制
		matplotlib支持绘制三维曲面,但需要使用axes3d提供的3d坐标系进行绘制. 

		from mpl_toolkits.mplot3d import axes3d
		ax3d = mp.gca(projection='3d')
		# 使用ax3d对象绘制3维图形
		ax3d.scatter()			# 3维散点图
		ax3d.plot_surface()		# 3维平面图
		ax3d.plot_wireframe()	# 3维线框图

3维散点图的绘制

		ax3d.scatter(
			x, y, z, 		# 点的位置坐标数组 x, y, z
			marker='',		#
			s=30,			#
			zorder=3,		#
			color='',		#
			edgecolor='',	# 边缘色
			facecolor='',	# 填充色
			c=v, 			# 设置颜色(使用cmap映射)
			cmap=''			
			)


案例: 生成三维散点数组, 显示在三维坐标系中.

			import numpy as np
			import matplotlib.pyplot as mp
			from mpl_toolkits.mplot3d import axes3d

			n = 1000
			x = np.random.normal(0, 1, n)
			y = np.random.normal(0, 1, n)
			z = np.random.normal(0, 1, n)

			mp.figure('3D Points', facecolor='gray')
			mp.title('3D Points', fontsize=18)
			# 获取3d坐标轴
			ax = mp.gca(projection='3d')
			ax.set_xlabel('X', fontsize=12)
			ax.set_ylabel('Y', fontsize=12)
			ax.set_zlabel('Z', fontsize=12)
			mp.tick_params(labelsize=8)
			# v用于设置散点的颜色
			v = np.sqrt(x**2 + y**2 + z**2)
			ax.scatter(x, y, z, s=30, c=v, cmap='jet',alpha=0.5)
			mp.show()


绘制3d平面图
		#如果n为1000, rstride为30,则图像将会被评分1000/33份,
		#分别设置不同的渐变色.这意味着跨距越小,图像越细腻,资源消
		#耗也越大.
		ax3d.plot_surface(
					x, y, z,	# 与等高线图的xyz参数相同
					rstride=30,	# 行跨距
					cstride=30, # 列跨距
					cmap='jet'	# 颜色映射
					)

			'''绘制3D平面图'''
			import numpy as np
			import matplotlib.pyplot as mp
			from mpl_toolkits.mplot3d import axes3d

			n = 1000
			x, y = np.meshgrid(np.linspace(-3, 3, n),np.linspace(-3, 3, n))
			z = (1 - x / 2 + x**5 + y**3) * np.exp(-x**2 - y**2)

			mp.figure('Hot', facecolor='lightgray')
			mp.title('Hot', fontsize=18)
			ax3d = mp.gca(projection='3d')
			ax3d.set_xlabel('x', fontsize=14)
			ax3d.set_ylabel('y', fontsize=14)
			ax3d.set_zlabel('z', fontsize=14)
			mp.tick_params(labelsize=10)
			ax3d.plot_surface(x, y, z, rstride=30,cstride=30, cmap='jet')
			mp.show()

绘制3d线宽图		
		ax3d.plot_wireframe(
					x, y, z,	# 与等高线图的xyz参数相同
					rstride=30,	# 行跨距
					cstride=30, # 列跨距
					cmap='jet'	# 颜色映射
					)
		
			'''绘制3D线框图'''
			import numpy as np
			import matplotlib.pyplot as mp
			from mpl_toolkits.mplot3d import axes3d

			n = 1000
			x, y = np.meshgrid(np.linspace(-3, 3, n),np.linspace(-3, 3, n))
			z = (1 - x / 2 + x**5 + y**3) * np.exp(-x**2 - y**2)

			mp.figure('Wire', facecolor='lightgray')
			mp.title('Wire', fontsize=18)
			ax3d = mp.gca(projection='3d')
			ax3d.set_xlabel('x', fontsize=14)
			ax3d.set_ylabel('y', fontsize=14)
			ax3d.set_zlabel('z', fontsize=14)
			mp.tick_params(labelsize=10)
			ax3d.plot_wireframe(x, y, z, rstride=30, cstride=30,color='dodgerblue')
			mp.show()

	
极坐标系
	与笛卡尔坐标系不同，某系情况下极坐标系合适处理与角度有关的图像，
	极坐标系可以描述极径p(rho)与极角0(theta)之间的关系
	
	mp.figure()
	mp.gca(projection='polar')
	#再进行图像绘制时将会基于极坐标系进行绘制
	
	案例 ： 在极坐标系中绘制一条线 [0,4π] y=0.8*x
	
		import numpy as np
		import matplotlib.pyplot as mp

		x = np.linspace(0, 4 * np.pi, 1000)
		y = 0.8 * x
		sinx = 3 * np.sin(6 * x)
		mp.figure('Polar', facecolor='lightgray')
		mp.gca(projection='polar')  # 使用极坐标系
		mp.title('Polar', fontsize=18)
		mp.xlabel('x', fontsize=14)
		mp.ylabel('y', fontsize=14)
		mp.tick_params(labelsize=10)
		mp.grid(linestyle=':')
		mp.plot(x, y, label='y=0.8x')
		mp.plot(x, sinx, label='y=3sin(6x)')
		mp.legend()
		mp.show()
	

实现简单动画
	动画是在一段时间内快速连续的重新绘制图像的过程
	matplotlib提供了方法用于处理简单动画的绘制.定义update函数用于实时更新图像
	
		import matplotlib.animation ma
		# 更新图像的函数,在该函数中实现图像更新业务
		def update(number):
			pass
		# 开始执行一段动画 (每隔10毫秒执行update更新界面)
		# mp.gcf(): 获取当前窗体 getCurrentFrame() 
		# update:	更新图像的函数,在该函数中实现图像更新业务
		# interval: 周期时间
		ma.FuncAnimation(mp.gcf(), update, interval=10)
	案例:
		import numpy as np
		import matplotlib.pyplot as mp
		import matplotlib.animation as ma

		# 1.随机生成100个泡泡
		# [((1,2), 30, 1, (0.2,0.2,0.2))]

		n = 100
		balls = np.zeros(n, dtype=[
				('position', float, 2),
				('size', float, 1),
				('growth', float, 1),
				('color', float, 4)])
		# 对着100个元素进行初始化 设置随机值
		# uniform随机生成0-1的数填充n行2列的数组
		balls['position'] = np.random.uniform(0, 1, (n, 2))
		balls['size'] = np.random.uniform(60, 70, n)
		balls['growth'] = np.random.uniform(10, 50, n)
		balls['color'] = np.random.uniform(0, 1, (n, 4))

		# 绘制这些球
		mp.figure('Bubbles', facecolor='lightgray')
		mp.title('Bubbles', fontsize=18)
		mp.xticks([])
		mp.yticks([])

		sc = mp.scatter(balls['position'][:, 0],
								balls['position'][:, 1],
								balls['size'],
								color=balls['color'])


		# 在update函数中更新球的状态
		def update(number):
			balls['size'] += balls['growth']
			# 选择一个泡泡使之破裂
			boom_ind = number % n
			balls[boom_ind]['size'] = np.random.uniform(67, 80, 1)
			balls[boom_ind]['position'] = np.random.uniform(0, 1, (1, 2))
			# 重新绘制
			sc.set_sizes(balls['size'])
			sc.set_offsets(balls['position'])


		anim = ma.FuncAnimation(
			mp.gcf(), update, interval=30)

		mp.show()	
	
	使用生成器函数提供数据,实现动画的绘制
			import matplotlib.animation ma
		# 更新图像的函数,在该函数中实现图像更新业务
			def update(val):
				pass
		# 生成器函数用于提供动画所需参数
			def generator():
				# ...
				yield val
		#执行动画时,将会先调用generator获取数据,然后带着数据调
		#用update函数执行界面更新.(这个过程每10毫秒执行一次)
			ma.FuncAnimation(mp.gcf(), update, generator,interval=10)
			
	案例:模拟信号接收器 y=sin(2πt)*exp(sin(0.2πt))
	
		import numpy as np
		import matplotlib.pyplot as mp
		import matplotlib.animation as ma

		mp.figure('Signal', facecolor='lightgray')
		mp.title('Signal', fontsize=18)
		mp.xlim(0, 10)
		mp.ylim(-3, 3)
		mp.grid(linestyle=':', alpha=0.5)
		pl = mp.plot([], [], color='dodgerblue',label='Signal')[0]
		pl.set_data([], [])
		# 接收生成器生成的(x,y),添加到绘制的
		# 曲线坐标数组中,重新绘制界面


		def update(data):
			t, v = data
			x, y = pl.get_data()
			# 把新的坐标点,添加到当前plot对象坐标数组中
			x.append(t)
			y.append(v)
			# 重新设置plot对象的数据集
			pl.set_data(x, y)
			# 移动坐标轴
			if(x[-1] > 10):
				mp.xlim(x[-1] - 10, x[-1])

		x = 0
		# 生成坐标点数据 yield返回
		def generator():
			global x
			y = np.sin(2 * np.pi * x) * \
				np.exp(np.sin(0.2 * np.pi * x))
			yield (x, y)
			x += 0.05

		# 执行动画
		anim = ma.FuncAnimation(mp.gcf(), update, generator, interval=30)

		mp.show()
	
	
-----------------------------------------------------------------------------------------------

numpy与matplolib应用
		加载文件
			读取 aapl.csv文件，在图标中绘制文件信息
		#converters={1:func} 当numpy读取数据时，会把第一列的数据先经过func函数的处理
		#然后交给dtype进行数据类型转换，最终赋值给array
		
		def func(data):
			return '2011-10-10'
		
		array=np.loadtxt(
				'../data/file.csv',						#文件路径
				delimiter=',',					#文件的列分隔符
				usecols=(1,3,4,5),			#需要读取的列的下标
				unpack = False,				#是否需要拆包(不拆返回二维数组，拆返回以每列为数组的元组)
				dtype='u10,f8,.....',			#读取的每每一列的类型
				converters={1:func}		#转换器函数字典	
		)
		
	案例:读取文件,绘制股价图.
	
		import numpy as np
		import matplotlib.pyplot as mp
		import datetime as dt
		import matplotlib.dates as md

		# 定义函数,转换日期格式
		def dmy2ymd(dmy):
			dmy = str(dmy, encoding='utf-8')
			date = dt.datetime.strptime(dmy, '%d-%m-%Y').date()
			s = date.strftime("%Y-%m-%d")
			return s

		# 加载文件
		dates, opening_prices, highest_prices, \
			lowest_prices, closing_prices = \
			np.loadtxt(
				'aapl.csv',
				delimiter=',',
				usecols=(1, 3, 4, 5, 6),
				unpack=True,
				dtype='M8[D], f8, f8, f8, f8',
				converters={1: dmy2ymd})

		# 绘制收盘价的折线图
		mp.figure('AAPL', facecolor='lightgray')
		mp.title('AAPL', fontsize=18)
		mp.xlabel('Date', fontsize=14)
		mp.ylabel('Price', fontsize=14)
		mp.tick_params(labelsize=10)
		mp.grid(linestyle=':')
		#设置刻度定位器, x轴需要显示时间信息
		ax = mp.gca()
		# x轴主刻度为每周一
		ax.xaxis.set_major_locator(
			md.WeekdayLocator(byweekday=md.MO))
		ax.xaxis.set_major_formatter(
			md.DateFormatter('%Y-%m-%d'))
		# x轴次刻度为每天
		ax.xaxis.set_minor_locator(
			md.DayLocator())
		# 把日期数组元素类型改为md可识别的类型
		dates = dates.astype(md.datetime.datetime)
		mp.plot(dates, closing_prices,
				color='dodgerblue', linewidth=3,
				linestyle=':', label='closing_price',
				alpha=0.3)

		# 整理蜡烛图所需的颜色
		# 填充色
		rise = closing_prices > opening_prices
		color = np.array([('white' if x else 'green')for x in rise])
		# 边框色
		ecolor = np.array([('red' if x else 'green')for x in rise])

		# 绘制K线图的影线
		mp.bar(dates,highest_prices - lowest_prices,
						0.1, lowest_prices, color=ecolor)

		# 绘制K线图的实体
		mp.bar(dates,
			closing_prices - opening_prices,
			0.8, opening_prices,
			edgecolor=ecolor, color=color)

		mp.legend()
		# 自动格式化日期显示方式
		mp.gcf().autofmt_xdate()
		mp.tight_layout()
		mp.show()
	
	
	
算数平均值
	算数平均值表示的对真值的无偏估计
		eg :
			s = [s1,s2,s3,s4,..sn]
			avg = (s1+s2+s3...+sn)/n
	
		1. np.mean(array)
		2. ndarray.mean()
		eg :	
			m = np.mean(closing_prices)
			mp.hlines(m,dates[0],dates[-1],color='orangered',label='AVG',linestyles='--')
		
	加权平均值
		算数平均值的每个样本对均值的影响权重是相同的，但实际业务中每个样本
		对真值的估计重要性是不同的。
		eg  : s = [s1,s2,s3,s4,..sn] 
			   w = [w1,w2,w3,w4,..wn]
			   avg = (s1w1+s2w2+....snwn)/(w1+w2+...wn)
			
		# array 样本数组
		# weight_array 每个样本权重值的数组
		np.average(array,weights=weight_array)
		
	(VWAP)成交量加权平均值
		成交量加权平均值体现了市场对当前交易价格的认可度，VWAP将会
		更接近这支股票的真实价格
		
		
	(TWAP)时间加权平均值
		时间加权平均值时间权重越高，参考意义越大（越靠近当前时间股价的时间权重越高）
	
最值
	np.max(array)	#求数组中的最大值
	np.min(array)	#求数组中的最小值
	np.ptp(array)	#求数组中的极差(max-min)
	
	np.argmax(array)  #求数组最大值的索引位置（下标）
	np.argmin(array)  #求数组最小值的索引位置（下标）
	
	# 返回新数组，每个元素从Aarray与Barray数组中进行选取，
		选择相应位置较大的值，作为新数组的元素
	np.maximum(Aarray,Barray)
	# 返回新数组，每个元素从Aarray与Barray数组中进行选取，
		选择相应位置较小的值，作为新数组的元素
	np.minimum(Aarray,Barray)
	
中位数
		将多个样本按照顺序排列，取中间位置的元素
		若样本数为奇数，中位数为最中间的元素，若为偶数，中间数是中间两个元素的平均值
		a = [1,2,3,4,5,..1000]
		#中位数的算法公式	: (a[int((size-1)/2)]+a[int(size/2)])/2 

	获取中位数	
		median = np.median(array)
		
	排序
		sortarray = np.msort(array)
	
	
标准差
		s = [s1,s2,s3,s4,s5,s6.....sn]  #样本
		avg = (s1+s2+s3...+sn)/n   #平均值
		D = [d1,d2,d3....dn]				#离差  d[i]= s[i]-avg
		Q = [q1,q2,q3,...qn] 			#离差方  q[i]= d[i]**2
		
		avgQ = (q1+q2+q3+q4+....+qn)/n	 #总体方差
		s = sqrt(avgQ)			#总体标准差
		
		avgQ' = (q1+q2+q3+q4+....+qn)/n-1 #样本方差
		s' = sqrt(avgQ')		#样本标准差
	
	方差与标准差可以表示一组数据相对于这组数据的均值的离散程度
	方差和标准差越大越离散，越小越收敛
	
	ndarray 标准差方法
		np.std(array)	#总体标准差
		np.std(array,ddof-1)	#样本标准差,ddof为修正值，ddof=1时，求标准差时的分母将会是n-1
		
	============补全
	
	
时间数据处理
		案例 ： 统计每周一/二/三...五的收盘价的平均值，并输出
		
	
	============补全
	
	
数据的轴向汇总
		案例 ： 汇总每周一/二/三...五的最高价，最低价，开盘价，收盘价
		
		#针对二维数组，沿着某个方向统一处理一组数据
		#func : 处理函数
		# axis : 轴向 [0,1]
		# array : 源数据二维数组
		def func(data)
			return 
			
		resule = np.apply_along_axis(func,axis,array)
			
			
		where方法返回值是一个元组
		np.where()
		
		============补全
	

移动平均线
		收盘价5日移动均线，从第五天开始，计算最近五天的收盘价平均值所构成的一条线
		移动均线可以实现简单的数据降噪功能，去除信号的噪声影响，更好的体现数据的趋势
		
		移动均线算法
			a b c d f  e g.....
			(a+b+c+d+f)/5
			(b+c+d+f+e)/5
			(c+d+f+e+g)/5
		忽略前4个数
		
		============补全
卷积运算
		卷积运算可以简单的对一组数据实现降噪功能
		
		一组数据a ： 1,2,3,4,5
		卷积核数组b : [8,7,6]	一般卷积核数组相加为1 
		使用b卷积核数组针对a数组执行卷积运算的过程如下:
		
		
									44     65	 86						有效卷积（核数组都用上了）
							 23	44     65	 86		59			同维卷积（与a数组同纬度）
					   8    23	44     65	 86		59	30	完全卷积
			0    0   1     2     3      4       5		0		0	
			6    7   8
				  6   7    8
					   6    7     8
							 6     7       8    
									6       7       8
											 6       7       8
													  6       7       8


		#array 源数组
		# core_array 卷积核数组
		# type  卷积类型(指定返回的卷积值数组)
		#		'valid'	有效卷积
		#		'same'	同维卷积
		#		'full'		完全卷积
		np.convolve(array,core_array,type)

		============补全

	二维卷积
		卷积核数组也是二维数组
		从垂直方向第一行开始进入卷积运算，逐行进行
		
	加权卷积
		卷积核数组根据业务分配权重
			[1/7,1/6,1/5,...]


















	









